{"version":3,"file":"static/chunks/889.fe96254bd27586e9.js","mappings":"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","sources":["webpack://_N_E/../ui-components/src/components/ifPlural.ts","webpack://_N_E/../ui-core/src/instance/backfill/BackfillStepStatusDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillTerminationDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillActionsMenu.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillRow.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillStatusTagForPage.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPartitionsRequestedDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillTable.tsx","webpack://_N_E/../ui-core/src/instigation/LiveTickTimeline2.tsx","webpack://_N_E/../ui-core/src/instigation/filterPermissionedInstigationState.tsx","webpack://_N_E/../ui-core/src/instigation/instigationStateSummary.tsx","webpack://_N_E/../ui-core/src/instigation/useInstigationStateReducer.tsx","webpack://_N_E/../ui-core/src/instigation/util.ts","webpack://_N_E/../ui-core/src/overview/BasicInstigationStateFragment.tsx","webpack://_N_E/../ui-core/src/overview/OverviewExpansionKey.tsx","webpack://_N_E/../ui-core/src/partitions/PartitionRunList.tsx","webpack://_N_E/../ui-core/src/partitions/PartitionStepStatus.tsx","webpack://_N_E/../ui-core/src/partitions/RunMatrixUtils.tsx","webpack://_N_E/../ui-core/src/partitions/useMatrixData.tsx","webpack://_N_E/../ui-core/src/partitions/usePartitionStepQuery.tsx","webpack://_N_E/../ui-core/src/resources/ResourceTabs.tsx","webpack://_N_E/../ui-core/src/resources/ResourceRoot.tsx","webpack://_N_E/../ui-core/src/resources/VirtualizedResourceRow.tsx","webpack://_N_E/../ui-core/src/resources/VirtualizedResourceTable.tsx","webpack://_N_E/../ui-core/src/resources/WorkspaceResourcesRoot.tsx","webpack://_N_E/../ui-core/src/runs/RepoSectionHeader.tsx","webpack://_N_E/../ui-core/src/ui/useFormatDateTime.tsx","webpack://_N_E/../ui-core/src/runs/mergeStatusToBackground.tsx","webpack://_N_E/../ui-core/src/runs/RunTimeline.tsx","webpack://_N_E/../ui-core/src/runs/batchRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/schedules/ScheduleStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/schedules/ScheduleBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulerInfo.tsx","webpack://_N_E/../ui-core/src/schedules/makeScheduleKey.tsx","webpack://_N_E/../ui-core/src/sensors/SensorStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/sensors/SensorBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/sensors/EditCursorDialog.tsx","webpack://_N_E/../ui-core/src/ticks/DynamicPartitionRequests.tsx","webpack://_N_E/../ui-core/src/ticks/SensorDryRunDialog.tsx","webpack://_N_E/../ui-core/src/sensors/SensorMonitoredAssets.tsx","webpack://_N_E/../ui-core/src/sensors/SensorDetails.tsx","webpack://_N_E/../ui-core/src/sensors/SensorInfo.tsx","webpack://_N_E/../ui-core/src/sensors/SensorTargetList.tsx","webpack://_N_E/../ui-core/src/sensors/makeSensorKey.tsx","webpack://_N_E/../ui-core/src/ticks/DryRunRequestTable.tsx","webpack://_N_E/../ui-core/src/ticks/RunRequestFragment.tsx","webpack://_N_E/../ui-core/src/ticks/TickStatusTag.tsx","webpack://_N_E/../ui-core/src/ui/CheckAllBox.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useInstigationStatusFilter.tsx","webpack://_N_E/../ui-core/src/ui/StickyTableContainer.tsx","webpack://_N_E/../ui-core/src/ui/findDuplicateRepoNames.tsx","webpack://_N_E/../ui-core/src/ui/useRepoExpansionState.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulesTable.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedScheduleRow.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedSensorRow.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedWorkspaceTable.tsx","webpack://_N_E/../ui-core/src/workspace/WorkspaceTabs.tsx","webpack://_N_E/../ui-core/src/workspace/WorkspaceHeader.tsx","webpack://_N_E/<anon>"],"sourcesContent":["export function ifPlural(\n  count: number | undefined | null,\n  singularString: string,\n  pluralString: string,\n) {\n  return count === 1 ? singularString : pluralString;\n}\n","import {gql} from '@apollo/client';\nimport {Button, DialogFooter, Dialog} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PartitionPerOpStatus} from '../../partitions/PartitionStepStatus';\nimport {usePartitionStepQuery} from '../../partitions/usePartitionStepQuery';\nimport {DagsterTag} from '../../runs/RunTag';\nimport {RunFilterToken} from '../../runs/RunsFilterInput';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressToSelector} from '../../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../../workspace/types';\n\nimport {BackfillStepStatusDialogBackfillFragment} from './types/BackfillStepStatusDialog.types';\n\ninterface Props {\n  backfill?: BackfillStepStatusDialogBackfillFragment;\n  onClose: () => void;\n}\n\nexport function backfillCanShowStepStatus(\n  backfill?: BackfillStepStatusDialogBackfillFragment,\n): backfill is BackfillStepStatusDialogBackfillFragment & {\n  partitionSet: NonNullable<BackfillStepStatusDialogBackfillFragment['partitionSet']>;\n  partitionNames: string[];\n} {\n  return !!backfill && backfill.partitionSet !== null && backfill.partitionNames !== null;\n}\n\nexport const BackfillStepStatusDialog = ({backfill, onClose}: Props) => {\n  const content = () => {\n    if (!backfillCanShowStepStatus(backfill)) {\n      return null;\n    }\n\n    const repoAddress = buildRepoAddress(\n      backfill.partitionSet.repositoryOrigin.repositoryName,\n      backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n    );\n\n    return (\n      <BackfillStepStatusDialogContent\n        backfill={backfill}\n        partitionSet={backfill.partitionSet}\n        partitionNames={backfill.partitionNames}\n        repoAddress={repoAddress}\n        onClose={onClose}\n      />\n    );\n  };\n\n  return (\n    <Dialog\n      isOpen={!!backfill?.partitionSet}\n      title={`Step status for backfill: ${backfill?.id}`}\n      onClose={onClose}\n      style={{width: '80vw'}}\n    >\n      {content()}\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT = gql`\n  fragment BackfillStepStatusDialogBackfillFragment on PartitionBackfill {\n    id\n    partitionNames\n    partitionSet {\n      name\n      pipelineName\n      repositoryOrigin {\n        repositoryName\n        repositoryLocationName\n      }\n    }\n  }\n`;\n\ninterface ContentProps {\n  backfill: BackfillStepStatusDialogBackfillFragment;\n  partitionSet: NonNullable<BackfillStepStatusDialogBackfillFragment['partitionSet']>;\n  partitionNames: string[];\n  repoAddress: RepoAddress;\n  onClose: () => void;\n}\n\nconst BackfillStepStatusDialogContent = ({\n  backfill,\n  partitionSet,\n  partitionNames,\n  repoAddress,\n}: ContentProps) => {\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n\n  const runsFilter = React.useMemo(() => {\n    const token: RunFilterToken = {token: 'tag', value: `dagster/backfill=${backfill.id}`};\n    return [token];\n  }, [backfill.id]);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames,\n    pageSize,\n    runsFilter,\n    repositorySelector: repoAddressToSelector(repoAddress),\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !backfill,\n  });\n\n  return (\n    <PartitionPerOpStatus\n      partitionNames={partitionNames}\n      partitions={partitions}\n      pipelineName={partitionSet?.pipelineName}\n      repoAddress={repoAddress}\n      setPageSize={setPageSize}\n      offset={offset}\n      setOffset={setOffset}\n    />\n  );\n};\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {Button, DialogBody, DialogFooter, Dialog} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {BulkActionStatus} from '../../graphql/types';\nimport {cancelableStatuses} from '../../runs/RunStatuses';\nimport {TerminationDialog} from '../../runs/TerminationDialog';\n\nimport {SINGLE_BACKFILL_STATUS_DETAILS_QUERY} from './BackfillRow';\nimport {SingleBackfillQuery, SingleBackfillQueryVariables} from './types/BackfillRow.types';\nimport {\n  CancelBackfillMutation,\n  CancelBackfillMutationVariables,\n  BackfillTerminationDialogBackfillFragment,\n} from './types/BackfillTerminationDialog.types';\n\ninterface Props {\n  backfill?: BackfillTerminationDialogBackfillFragment;\n  onClose: () => void;\n  onComplete: () => void;\n}\n\nexport const BackfillTerminationDialog = ({backfill, onClose, onComplete}: Props) => {\n  const [cancelBackfill] = useMutation<CancelBackfillMutation, CancelBackfillMutationVariables>(\n    CANCEL_BACKFILL_MUTATION,\n  );\n  const {data} = useQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {\n        backfillId: backfill?.id || '',\n      },\n      notifyOnNetworkStatusChange: true,\n      skip: !backfill,\n    },\n  );\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const unfinishedMap = React.useMemo(() => {\n    if (!backfill || !data || data.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {};\n    }\n    const unfinishedPartitions = data.partitionBackfillOrError.partitionStatuses?.results.filter(\n      (partition) =>\n        partition.runStatus && partition.runId && cancelableStatuses.has(partition.runStatus),\n    );\n    return (\n      unfinishedPartitions?.reduce(\n        (accum, partition) =>\n          partition && partition.runId ? {...accum, [partition.runId]: true} : accum,\n        {},\n      ) || {}\n    );\n  }, [backfill, data]);\n  if (!backfill || !data) {\n    return null;\n  }\n\n  const numUnscheduled = backfill.numCancelable;\n  const cancel = async () => {\n    setIsSubmitting(true);\n    await cancelBackfill({variables: {backfillId: backfill.id}});\n    onComplete();\n    setIsSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <>\n      <Dialog\n        isOpen={\n          !!backfill &&\n          backfill.status !== BulkActionStatus.CANCELED &&\n          (backfill.isAssetBackfill || !!numUnscheduled)\n        }\n        title=\"Cancel backfill\"\n        onClose={onClose}\n      >\n        {backfill.isAssetBackfill ? (\n          <DialogBody>\n            Confirm cancellation of asset backfill? This will mark unfinished runs as canceled.\n          </DialogBody>\n        ) : (\n          <DialogBody>\n            There {numUnscheduled === 1 ? 'is 1 partition ' : `are ${numUnscheduled} partitions `}\n            yet to be queued or launched.\n          </DialogBody>\n        )}\n        <DialogFooter>\n          <Button intent=\"none\" onClick={onClose}>\n            Close\n          </Button>\n          {isSubmitting ? (\n            <Button intent=\"danger\" disabled>\n              Canceling...\n            </Button>\n          ) : (\n            <Button intent=\"danger\" onClick={cancel}>\n              Cancel backfill\n            </Button>\n          )}\n        </DialogFooter>\n      </Dialog>\n      {unfinishedMap && (\n        <TerminationDialog\n          isOpen={\n            !!backfill &&\n            (!numUnscheduled || backfill.status !== 'REQUESTED') &&\n            !!Object.keys(unfinishedMap).length\n          }\n          onClose={onClose}\n          onComplete={onComplete}\n          selectedRuns={unfinishedMap}\n        />\n      )}\n    </>\n  );\n};\n\nexport const BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT = gql`\n  fragment BackfillTerminationDialogBackfillFragment on PartitionBackfill {\n    id\n    status\n    isAssetBackfill\n    numCancelable\n  }\n`;\n\nconst CANCEL_BACKFILL_MUTATION = gql`\n  mutation CancelBackfill($backfillId: String!) {\n    cancelPartitionBackfill(backfillId: $backfillId) {\n      ... on CancelBackfillSuccess {\n        backfillId\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useMutation} from '@apollo/client';\nimport {Button, Group, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {showSharedToaster} from '../../app/DomUtils';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {runsPathWithFilters} from '../../runs/RunsFilterInput';\n\nimport {\n  BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT,\n  BackfillStepStatusDialog,\n  backfillCanShowStepStatus,\n} from './BackfillStepStatusDialog';\nimport {\n  BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT,\n  BackfillTerminationDialog,\n} from './BackfillTerminationDialog';\nimport {RESUME_BACKFILL_MUTATION} from './BackfillUtils';\nimport {BackfillActionsBackfillFragment} from './types/BackfillActionsMenu.types';\nimport {ResumeBackfillMutation, ResumeBackfillMutationVariables} from './types/BackfillUtils.types';\n\nexport function backfillCanCancelSubmission(backfill: {\n  hasCancelPermission: boolean;\n  isAssetBackfill: boolean;\n  status: BulkActionStatus;\n  numCancelable: number;\n}) {\n  return (\n    backfill.hasCancelPermission &&\n    ((backfill.isAssetBackfill && backfill.status === BulkActionStatus.REQUESTED) ||\n      backfill.numCancelable > 0)\n  );\n}\n\nexport function backfillCanResume(backfill: {\n  hasResumePermission: boolean;\n  status: BulkActionStatus;\n  partitionSet: {__typename: 'PartitionSet'} | null;\n}) {\n  return !!(\n    backfill.hasResumePermission &&\n    backfill.status === BulkActionStatus.FAILED &&\n    backfill.partitionSet\n  );\n}\n\nexport function backfillCanCancelRuns(\n  backfill: {hasCancelPermission: boolean},\n  counts: {[runStatus: string]: number} | null,\n) {\n  if (!backfill.hasCancelPermission || !counts) {\n    return false;\n  }\n  const queuedCount = counts[RunStatus.QUEUED] || 0;\n  const startedCount = counts[RunStatus.STARTED] || 0;\n  return queuedCount > 0 || startedCount > 0;\n}\n\nexport const BackfillActionsMenu = ({\n  backfill,\n  canCancelRuns,\n  refetch,\n}: {\n  backfill: BackfillActionsBackfillFragment;\n  canCancelRuns: boolean;\n  refetch: () => void;\n}) => {\n  const history = useHistory();\n  const runsUrl = runsPathWithFilters([\n    {\n      token: 'tag',\n      value: `dagster/backfill=${backfill.id}`,\n    },\n  ]);\n\n  const [showTerminateDialog, setShowTerminateDialog] = React.useState(false);\n  const [showStepStatus, setShowStepStatus] = React.useState(false);\n  const [resumeBackfill] = useMutation<ResumeBackfillMutation, ResumeBackfillMutationVariables>(\n    RESUME_BACKFILL_MUTATION,\n  );\n\n  const resume = async () => {\n    const {data} = await resumeBackfill({variables: {backfillId: backfill.id}});\n    if (data && data.resumePartitionBackfill.__typename === 'ResumeBackfillSuccess') {\n      refetch();\n    } else if (data && data.resumePartitionBackfill.__typename === 'UnauthorizedError') {\n      await showSharedToaster({\n        message: (\n          <Group direction=\"column\" spacing={4}>\n            <div>\n              Attempted to retry the backfill in read-only mode. This backfill was not retried.\n            </div>\n          </Group>\n        ),\n        icon: 'error',\n        intent: 'danger',\n      });\n    } else if (data && data.resumePartitionBackfill.__typename === 'PythonError') {\n      const error = data.resumePartitionBackfill;\n      await showSharedToaster({\n        message: <div>An unexpected error occurred. This backfill was not retried.</div>,\n        icon: 'error',\n        intent: 'danger',\n        action: {\n          text: 'View error',\n          onClick: () =>\n            showCustomAlert({\n              body: <PythonErrorInfo error={error} />,\n            }),\n        },\n      });\n    }\n  };\n\n  const canCancelSubmission = backfillCanCancelSubmission(backfill);\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <MenuItem\n              text=\"View backfill runs\"\n              icon=\"settings_backup_restore\"\n              onClick={() => history.push(runsUrl)}\n            />\n            <MenuItem\n              disabled={!backfillCanShowStepStatus(backfill)}\n              text=\"View step status\"\n              icon=\"view_list\"\n              onClick={() => {\n                setShowStepStatus(true);\n              }}\n            />\n            <MenuItem\n              disabled={!backfillCanResume(backfill)}\n              text=\"Resume failed backfill\"\n              title=\"Submits runs for all partitions in the backfill that do not have a corresponding run. Does not retry failed runs.\"\n              icon=\"refresh\"\n              onClick={() => resume()}\n            />\n            <MenuItem\n              text={\n                canCancelSubmission ? 'Cancel backfill submission' : 'Terminate unfinished runs'\n              }\n              icon=\"cancel\"\n              intent=\"danger\"\n              disabled={!(canCancelSubmission || canCancelRuns)}\n              onClick={() => setShowTerminateDialog(true)}\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n\n      <BackfillStepStatusDialog\n        backfill={showStepStatus ? backfill : undefined}\n        onClose={() => setShowStepStatus(false)}\n      />\n      <BackfillTerminationDialog\n        backfill={showTerminateDialog ? backfill : undefined}\n        onClose={() => setShowTerminateDialog(false)}\n        onComplete={() => refetch()}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_ACTIONS_BACKFILL_FRAGMENT = gql`\n  fragment BackfillActionsBackfillFragment on PartitionBackfill {\n    id\n    hasCancelPermission\n    hasResumePermission\n    isAssetBackfill\n    status\n    numCancelable\n\n    ...BackfillStepStatusDialogBackfillFragment\n    ...BackfillTerminationDialogBackfillFragment\n  }\n\n  ${BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT}\n  ${BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT}\n`;\n","import {gql, QueryResult, useLazyQuery} from '@apollo/client';\nimport {Box, colorTextLight, Icon, Mono, Tag} from '@dagster-io/ui-components';\nimport countBy from 'lodash/countBy';\nimport * as React from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../../asset-graph/Utils';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {PartitionStatus, PartitionStatusHealthSourceOps} from '../../partitions/PartitionStatus';\nimport {PipelineReference} from '../../pipelines/PipelineReference';\nimport {AssetKeyTagCollection} from '../../runs/AssetTagCollections';\nimport {CreatedByTagCell} from '../../runs/CreatedByTag';\nimport {inProgressStatuses} from '../../runs/RunStatuses';\nimport {RunStatusTagsWithCounts} from '../../runs/RunTimeline';\nimport {runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {TimestampDisplay} from '../../schedules/TimestampDisplay';\nimport {useDelayedRowQuery} from '../../workspace/VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from '../../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\nimport {workspacePathFromAddress, workspacePipelinePath} from '../../workspace/workspacePath';\n\nimport {BackfillActionsMenu, backfillCanCancelRuns} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {\n  PartitionStatusesForBackfillFragment,\n  SingleBackfillCountsQuery,\n  SingleBackfillCountsQueryVariables,\n  SingleBackfillQuery,\n  SingleBackfillQueryVariables,\n} from './types/BackfillRow.types';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\n\ninterface BackfillRowProps {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  showBackfillTarget: boolean;\n  onShowPartitionsRequested: (backfill: BackfillTableFragment) => void;\n  refetch: () => void;\n}\n\nexport const BackfillRow = (props: BackfillRowProps) => {\n  const statusUnsupported =\n    props.backfill.numPartitions === null ||\n    props.backfill.partitionNames === null ||\n    props.backfill.isAssetBackfill;\n\n  if (statusUnsupported) {\n    return <BackfillRowContent {...props} counts={null} statuses={null} statusQueryResult={null} />;\n  }\n  return (\n    <BackfillRowLoader backfillId={props.backfill.id} numPartitions={props.backfill.numPartitions}>\n      {(data) => <BackfillRowContent {...props} {...data} />}\n    </BackfillRowLoader>\n  );\n};\n\ninterface LoadResult {\n  counts: {[runStatus: string]: number} | null;\n  statusQueryResult: QueryResult<any, any> | null;\n  statuses: PartitionStatusesForBackfillFragment['results'] | null;\n}\n\nexport const BackfillRowLoader = (props: {\n  backfillId: string;\n  numPartitions: number | null;\n  children: (data: LoadResult) => React.ReactNode;\n}) => {\n  const {backfillId, numPartitions} = props;\n\n  const statusDetails = useLazyQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {backfillId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const statusCounts = useLazyQuery<SingleBackfillCountsQuery, SingleBackfillCountsQueryVariables>(\n    SINGLE_BACKFILL_STATUS_COUNTS_QUERY,\n    {\n      variables: {backfillId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  // Note: We switch queries based on how many partitions there are to display,\n  // because the detail is nice for small backfills but breaks for 100k+ partitions.\n  //\n  const [statusQueryFn, statusQueryResult] =\n    (numPartitions || 0) > BACKFILL_PARTITIONS_COUNTS_THRESHOLD ? statusCounts : statusDetails;\n\n  useDelayedRowQuery(statusQueryFn);\n  useQueryRefreshAtInterval(statusQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = statusQueryResult;\n  const {counts, statuses} = React.useMemo(() => {\n    if (data?.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {counts: null, statuses: null};\n    }\n    if ('partitionStatusCounts' in data.partitionBackfillOrError) {\n      const counts = Object.fromEntries(\n        data.partitionBackfillOrError.partitionStatusCounts.map((e) => [e.runStatus, e.count]),\n      );\n      return {counts, statuses: null};\n    }\n    const statuses = data.partitionBackfillOrError.partitionStatuses?.results || null;\n    const counts = countBy(statuses, (k) => k.runStatus);\n    return {counts, statuses};\n  }, [data]);\n\n  return props.children({counts, statuses, statusQueryResult});\n};\n\nexport const BackfillRowContent = ({\n  backfill,\n  allPartitions,\n  showBackfillTarget,\n  onShowPartitionsRequested,\n  refetch,\n  counts,\n  statuses,\n  statusQueryResult,\n}: BackfillRowProps & LoadResult) => {\n  const repoAddress = backfill.partitionSet\n    ? buildRepoAddress(\n        backfill.partitionSet.repositoryOrigin.repositoryName,\n        backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n      )\n    : null;\n\n  const renderBackfillStatus = () =>\n    statusQueryResult?.loading ? (\n      <div style={{color: colorTextLight()}}>Loading</div>\n    ) : (\n      <BackfillStatusTag backfill={backfill} counts={counts} />\n    );\n\n  const renderRunStatus = () => {\n    if (!backfill.isValidSerialization) {\n      return <p>A partitions definition has changed since this backfill ran.</p>;\n    }\n    if (statusQueryResult?.loading) {\n      return <div style={{color: colorTextLight()}}>Loading</div>;\n    }\n    return counts ? (\n      <BackfillRunStatus backfill={backfill} counts={counts} statuses={statuses} />\n    ) : (\n      <div style={{color: colorTextLight()}}>{'\\u2013'}</div>\n    );\n  };\n\n  return (\n    <tr>\n      <td style={{width: 120}}>\n        <Mono style={{fontSize: '16px', lineHeight: '18px'}}>\n          <Link\n            to={\n              backfill.isAssetBackfill\n                ? `/overview/backfills/${backfill.id}`\n                : runsPathWithFilters([\n                    {\n                      token: 'tag',\n                      value: `dagster/backfill=${backfill.id}`,\n                    },\n                  ])\n            }\n          >\n            {backfill.id}\n          </Link>\n        </Mono>\n      </td>\n      <td style={{width: 220}}>\n        {backfill.timestamp ? <TimestampDisplay timestamp={backfill.timestamp} /> : '-'}\n      </td>\n      {showBackfillTarget ? (\n        <td style={{width: '20%'}}>\n          <BackfillTarget backfill={backfill} repoAddress={repoAddress} />\n        </td>\n      ) : null}\n      <td style={{width: allPartitions ? 300 : 140}}>\n        <BackfillRequestedRange\n          backfill={backfill}\n          allPartitions={allPartitions}\n          onExpand={() => onShowPartitionsRequested(backfill)}\n        />\n      </td>\n      <td style={{width: 160}}>\n        <CreatedByTagCell tags={backfill.tags} repoAddress={repoAddress} />\n      </td>\n      <td style={{width: 140}}>{renderBackfillStatus()}</td>\n      <td>{renderRunStatus()}</td>\n      <td>\n        <BackfillActionsMenu\n          backfill={backfill}\n          canCancelRuns={backfillCanCancelRuns(backfill, counts)}\n          refetch={refetch}\n        />\n      </td>\n    </tr>\n  );\n};\n\nconst BACKFILL_PARTITIONS_COUNTS_THRESHOLD = 1000;\n\nconst BackfillRunStatus = ({\n  backfill,\n  statuses,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  statuses: PartitionStatusesForBackfillFragment['results'] | null;\n  counts: {[status: string]: number};\n}) => {\n  const history = useHistory();\n  const partitionCounts = Object.entries(counts).reduce(\n    (partitionCounts, [runStatus, count]) => {\n      partitionCounts[runStatus] = (partitionCounts[runStatus] || 0) + count;\n      return partitionCounts;\n    },\n    {} as {[status: string]: number},\n  );\n\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        statuses?.filter((s) => s.partitionName === key)[0]?.runStatus || RunStatus.NOT_STARTED,\n    }),\n    [statuses],\n  );\n\n  return statuses && backfill.partitionNames ? (\n    <PartitionStatus\n      partitionNames={backfill.partitionNames}\n      health={health}\n      splitPartitions\n      onClick={(partitionName) => {\n        const entry = statuses.find((r) => r.partitionName === partitionName);\n        if (entry?.runId) {\n          history.push(`/runs/${entry.runId}`);\n        }\n      }}\n    />\n  ) : (\n    <RunStatusTagsWithCounts\n      succeededCount={partitionCounts[RunStatus.SUCCESS] || 0}\n      inProgressCount={partitionCounts[RunStatus.STARTED] || 0}\n      failedCount={partitionCounts[RunStatus.FAILURE] || 0}\n    />\n  );\n};\n\nconst BackfillTarget = ({\n  backfill,\n  repoAddress,\n}: {\n  backfill: BackfillTableFragment;\n  repoAddress: RepoAddress | null;\n}) => {\n  const repo = useRepository(repoAddress);\n  const {assetSelection, partitionSet, partitionSetName} = backfill;\n\n  const isHiddenAssetPartitionSet = isHiddenAssetGroupJob(partitionSetName || '');\n\n  const buildHeader = () => {\n    if (isHiddenAssetPartitionSet) {\n      return null;\n    }\n    if (partitionSet && repo) {\n      return (\n        <Link\n          style={{fontWeight: 500}}\n          to={workspacePipelinePath({\n            repoName: partitionSet.repositoryOrigin.repositoryName,\n            repoLocation: partitionSet.repositoryOrigin.repositoryLocationName,\n            pipelineName: partitionSet.pipelineName,\n            isJob: isThisThingAJob(repo, partitionSet.pipelineName),\n            path: `/partitions?partitionSet=${encodeURIComponent(partitionSet.name)}`,\n          })}\n        >\n          {partitionSet.name}\n        </Link>\n      );\n    }\n    if (partitionSetName) {\n      return <span style={{fontWeight: 500}}>{partitionSetName}</span>;\n    }\n    return null;\n  };\n\n  const buildRepoLink = () =>\n    repoAddress ? (\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}} style={{fontSize: '12px'}}>\n        <Icon name=\"repo\" color={colorTextLight()} />\n        <Link to={workspacePathFromAddress(repoAddress)}>\n          {repoAddressAsHumanString(repoAddress)}\n        </Link>\n      </Box>\n    ) : undefined;\n\n  const buildPipelineOrAssets = () => {\n    if (assetSelection?.length) {\n      return <AssetKeyTagCollection assetKeys={assetSelection} dialogTitle=\"Assets in backfill\" />;\n    }\n    if (partitionSet && repo) {\n      return (\n        <PipelineReference\n          showIcon\n          size=\"small\"\n          pipelineName={partitionSet.pipelineName}\n          pipelineHrefContext={{\n            name: partitionSet.repositoryOrigin.repositoryName,\n            location: partitionSet.repositoryOrigin.repositoryLocationName,\n          }}\n          isJob={isThisThingAJob(repo, partitionSet.pipelineName)}\n        />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      {buildHeader()}\n      <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n        {buildRepoLink()}\n        {buildPipelineOrAssets()}\n      </Box>\n    </Box>\n  );\n};\n\nconst BackfillRequestedRange = ({\n  allPartitions,\n  backfill,\n  onExpand,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onExpand: () => void;\n}) => {\n  const {partitionNames, numPartitions} = backfill;\n\n  if (numPartitions === null) {\n    return <span />;\n  }\n\n  const numPartitionsLabel = `${numPartitions.toLocaleString()} ${\n    numPartitions === 1 ? 'partition' : 'partitions'\n  }`;\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      <div>\n        {partitionNames ? (\n          <TagButton onClick={onExpand}>\n            <Tag intent=\"primary\" interactive>\n              {numPartitionsLabel}\n            </Tag>\n          </TagButton>\n        ) : (\n          <Tag intent=\"primary\">{numPartitionsLabel}</Tag>\n        )}\n      </div>\n      {allPartitions && partitionNames && (\n        <RequestedPartitionStatusBar all={allPartitions} requested={partitionNames} />\n      )}\n    </Box>\n  );\n};\n\nconst RequestedPartitionStatusBar = ({all, requested}: {all: string[]; requested: string[]}) => {\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        requested && requested.includes(key) ? RunStatus.QUEUED : RunStatus.NOT_STARTED,\n    }),\n    [requested],\n  );\n  return <PartitionStatus small hideStatusTooltip partitionNames={all} health={health} />;\n};\n\nexport const BackfillStatusTag = ({\n  backfill,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  counts: {[status: string]: number} | null;\n}) => {\n  if (backfill.isAssetBackfill) {\n    return <BackfillStatusTagForPage backfill={backfill} />;\n  }\n\n  switch (backfill.status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>In progress</Tag>;\n    case BulkActionStatus.FAILED:\n      return (\n        <Box margin={{bottom: 12}}>\n          <TagButton\n            onClick={() =>\n              backfill.error &&\n              showCustomAlert({title: 'Error', body: <PythonErrorInfo error={backfill.error} />})\n            }\n          >\n            <Tag intent=\"danger\">Failed</Tag>\n          </TagButton>\n        </Box>\n      );\n    case BulkActionStatus.COMPLETED:\n      if (backfill.partitionNames === null) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (!counts) {\n        return <div style={{color: colorTextLight()}}>None</div>;\n      }\n      if (counts[RunStatus.SUCCESS] === backfill.partitionNames.length) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (Array.from(inProgressStatuses).some((status) => counts[status])) {\n        return <Tag intent=\"primary\">In progress</Tag>;\n      }\n      return <Tag intent=\"warning\">Incomplete</Tag>;\n    case BulkActionStatus.CANCELING:\n      return <Tag>Canceling</Tag>;\n    case BulkActionStatus.CANCELED:\n      return <Tag>Canceled</Tag>;\n  }\n  return <span />;\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_COUNTS_QUERY = gql`\n  query SingleBackfillCountsQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionStatusCounts {\n          runStatus\n          count\n        }\n      }\n    }\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_DETAILS_QUERY = gql`\n  query SingleBackfillQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionStatuses {\n          ...PartitionStatusesForBackfill\n        }\n      }\n    }\n  }\n\n  fragment PartitionStatusesForBackfill on PartitionStatuses {\n    results {\n      id\n      partitionName\n      runId\n      runStatus\n    }\n  }\n`;\n","import {Box, Tag} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {PythonErrorFragment} from '../../app/types/PythonErrorFragment.types';\nimport {BulkActionStatus} from '../../graphql/types';\n\ntype BackfillState = {\n  status: BulkActionStatus;\n  error: PythonErrorFragment | null;\n};\n\nexport const BackfillStatusTagForPage = ({backfill}: {backfill: BackfillState}) => {\n  const {status, error} = backfill;\n  function errorState(status: string) {\n    return (\n      <Box margin={{bottom: 12}}>\n        <TagButton\n          onClick={() =>\n            error && showCustomAlert({title: 'Error', body: <PythonErrorInfo error={error} />})\n          }\n        >\n          <Tag intent=\"danger\">{status}</Tag>\n        </TagButton>\n      </Box>\n    );\n  }\n\n  switch (status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>In progress</Tag>;\n\n    case BulkActionStatus.CANCELING:\n      return errorState('Canceling');\n    case BulkActionStatus.CANCELED:\n      return errorState('Canceled');\n    case BulkActionStatus.FAILED:\n      return errorState('Failed');\n    case BulkActionStatus.COMPLETED:\n      return <Tag intent=\"success\">Completed</Tag>;\n    default:\n      return <Tag>{status}</Tag>;\n  }\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n","import {Button, DialogFooter, Dialog, FontFamily} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {VirtualizedItemListForDialog} from '../../ui/VirtualizedItemListForDialog';\n\nimport {BackfillTableFragment} from './types/BackfillTable.types';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base', numeric: true});\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\nexport const BackfillPartitionsRequestedDialog = ({backfill, onClose}: Props) => {\n  return (\n    <Dialog\n      isOpen={!!backfill}\n      title={\n        <span>\n          Partitions requested for backfill:{' '}\n          <span style={{fontSize: '18px', fontFamily: FontFamily.monospace}}>{backfill?.id}</span>\n        </span>\n      }\n      onClose={onClose}\n    >\n      <DialogContent partitionNames={backfill?.partitionNames || []} />\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface DialogContentProps {\n  partitionNames: string[];\n}\n\n// Separate component so that we can delay sorting until render.\nconst DialogContent = (props: DialogContentProps) => {\n  const {partitionNames} = props;\n\n  const sorted = React.useMemo(() => {\n    return [...(partitionNames || [])].sort((a, b) => COLLATOR.compare(a, b));\n  }, [partitionNames]);\n\n  return (\n    <div style={{height: '340px', overflow: 'hidden'}}>\n      <VirtualizedItemListForDialog\n        items={sorted}\n        renderItem={(partitionName) => (\n          <div key={partitionName}>\n            <TruncatedTextWithFullTextOnHover text={partitionName} />\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n","import {gql} from '@apollo/client';\nimport {Table} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT} from './BackfillActionsMenu';\nimport {BackfillPartitionsRequestedDialog} from './BackfillPartitionsRequestedDialog';\nimport {BackfillRow} from './BackfillRow';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\n\nexport const BackfillTable = ({\n  showBackfillTarget = true,\n  allPartitions,\n  backfills,\n  refetch,\n}: {\n  allPartitions?: string[];\n  backfills: BackfillTableFragment[];\n  refetch: () => void;\n  showBackfillTarget?: boolean;\n}) => {\n  const [partitionsRequestedBackfill, setPartitionsRequestedBackfill] =\n    React.useState<BackfillTableFragment>();\n\n  return (\n    <>\n      <Table>\n        <thead>\n          <tr>\n            <th>Backfill ID</th>\n            <th>Created</th>\n            {showBackfillTarget ? <th>Backfill target</th> : null}\n            <th>Requested</th>\n            <th>Launched by</th>\n            <th>Backfill status</th>\n            <th>Run status</th>\n            <th style={{width: 80}} />\n          </tr>\n        </thead>\n        <tbody>\n          {backfills.map((backfill) => (\n            <BackfillRow\n              key={backfill.id}\n              showBackfillTarget={showBackfillTarget}\n              backfill={backfill}\n              allPartitions={allPartitions}\n              onShowPartitionsRequested={setPartitionsRequestedBackfill}\n              refetch={refetch}\n            />\n          ))}\n        </tbody>\n      </Table>\n\n      <BackfillPartitionsRequestedDialog\n        backfill={partitionsRequestedBackfill}\n        onClose={() => setPartitionsRequestedBackfill(undefined)}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_TABLE_FRAGMENT = gql`\n  fragment BackfillTableFragment on PartitionBackfill {\n    id\n    status\n    isAssetBackfill\n    isValidSerialization\n    partitionNames\n    numPartitions\n    timestamp\n    partitionSetName\n    partitionSet {\n      id\n      ...PartitionSetForBackfillTable\n    }\n    assetSelection {\n      path\n    }\n    tags {\n      key\n      value\n    }\n    error {\n      ...PythonErrorFragment\n    }\n    ...BackfillActionsBackfillFragment\n  }\n\n  fragment PartitionSetForBackfillTable on PartitionSet {\n    id\n    name\n    mode\n    pipelineName\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n","import {\n  Caption,\n  Tooltip,\n  colorAccentGrayHover,\n  colorAccentGreen,\n  colorAccentGreenHover,\n  colorAccentLavender,\n  colorAccentLavenderHover,\n  colorAccentPrimary,\n  colorAccentRed,\n  colorAccentRedHover,\n  colorAccentReversed,\n  colorBackgroundDefault,\n  colorBackgroundDisabled,\n  colorKeylineDefault,\n  colorTextLight,\n  ifPlural,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport memoize from 'lodash/memoize';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\n\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {isOldTickWithoutEndtimestamp} from './util';\n\ndayjs.extend(relativeTime);\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: colorAccentGreen(),\n  [InstigationTickStatus.FAILURE]: colorAccentRed(),\n  [InstigationTickStatus.STARTED]: colorAccentLavender(),\n  [InstigationTickStatus.SKIPPED]: colorBackgroundDisabled(),\n};\n\nconst HoverColorMap = {\n  [InstigationTickStatus.SUCCESS]: colorAccentGreenHover(),\n  [InstigationTickStatus.FAILURE]: colorAccentRedHover(),\n  [InstigationTickStatus.STARTED]: colorAccentLavenderHover(),\n  [InstigationTickStatus.SKIPPED]: colorAccentGrayHover(),\n};\n\nconst REFRESH_INTERVAL = 100;\n\nconst MIN_WIDTH = 8; // At least 8px wide\n\nconst MINUTE = 60000;\n\nconst timestampFormat = memoize((timezone: string) => {\n  return new Intl.DateTimeFormat(navigator.language, {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hourCycle: 'h23',\n    timeZone: timezone === 'Automatic' ? browserTimezone() : timezone,\n    timeZoneName: 'short',\n  });\n});\nexport const LiveTickTimeline = <T extends HistoryTickFragment | AssetDaemonTickFragment>({\n  ticks,\n  onHoverTick,\n  onSelectTick,\n  exactRange,\n  timeRange = MINUTE * 5, // 5 minutes,\n  tickGrid = MINUTE, // 1 minute\n  timeAfter = MINUTE, // 1 minute\n}: {\n  ticks: T[];\n  onHoverTick: (InstigationTick?: T) => void;\n  onSelectTick: (InstigationTick: T) => void;\n  exactRange?: [number, number];\n  timeRange?: number;\n  tickGrid?: number;\n  timeAfter?: number;\n}) => {\n  const [now, setNow] = React.useState<number>(Date.now());\n  const [isPaused, setPaused] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (!isPaused && !exactRange) {\n      const interval = setInterval(() => {\n        setNow(Date.now());\n      }, REFRESH_INTERVAL);\n      return () => clearInterval(interval);\n    }\n    return () => {};\n  }, [exactRange, isPaused]);\n\n  const maxX = exactRange?.[1] ? exactRange[1] * 1000 : now + timeAfter;\n  const minX = exactRange?.[0] ? exactRange[0] * 1000 : now - timeRange;\n\n  const fullRange = maxX - minX;\n\n  const {viewport, containerProps} = useViewport();\n\n  const ticksReversed = React.useMemo(() => {\n    // Reverse ticks to make tab order correct\n    return ticks.filter((tick) => !tick.endTimestamp || tick.endTimestamp * 1000 > minX).reverse();\n  }, [ticks, minX]);\n\n  const ticksToDisplay = React.useMemo(() => {\n    return ticksReversed.map((tick) => {\n      const startX = getX(1000 * tick.timestamp!, viewport.width, minX, fullRange);\n      const endTimestamp = isOldTickWithoutEndtimestamp(tick)\n        ? tick.timestamp\n        : tick.endTimestamp\n        ? tick.endTimestamp * 1000\n        : now;\n      const endX = getX(endTimestamp, viewport.width, minX, fullRange);\n      return {\n        ...tick,\n        width: Math.max(endX - startX, MIN_WIDTH),\n        startX,\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minX, now, ticksReversed, fullRange, viewport.width]);\n\n  const timeTickGridDelta = Math.max((maxX - minX) / 25, tickGrid);\n  const tickGridDelta = timeTickGridDelta / 5;\n  const startTickGridX = Math.ceil(minX / tickGridDelta) * tickGridDelta;\n  const gridTicks = React.useMemo(() => {\n    const ticks = [];\n    for (let i = startTickGridX; i <= maxX; i += tickGridDelta) {\n      ticks.push({\n        time: i,\n        x: getX(i, viewport.width, minX, fullRange),\n        showLabel: i % timeTickGridDelta === 0,\n      });\n    }\n    return ticks;\n  }, [maxX, startTickGridX, tickGridDelta, viewport.width, minX, fullRange, timeTickGridDelta]);\n\n  const {\n    timezone: [timezone],\n  } = React.useContext(TimeContext);\n\n  return (\n    <div style={{marginRight: '8px'}}>\n      <div {...containerProps}>\n        <TicksWrapper>\n          {gridTicks.map((tick) => (\n            <GridTick\n              key={tick.time}\n              style={{\n                transform: `translateX(${tick.x}px)`,\n              }}\n            >\n              <GridTickLine />\n              {tick.showLabel ? (\n                <GridTickTime>\n                  <Caption>{timestampFormat(timezone).format(new Date(tick.time))}</Caption>\n                </GridTickTime>\n              ) : null}\n            </GridTick>\n          ))}\n          {ticksToDisplay.map((tick) => {\n            const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n            const count =\n              (isAssetDaemonTick ? tick.requestedAssetMaterializationCount : tick.runIds?.length) ??\n              0;\n            return (\n              <Tick\n                key={tick.id}\n                style={{\n                  transform: `translateX(${tick.startX}px)`,\n                  width: `${tick.width}px`,\n                }}\n                status={tick.status}\n                onMouseEnter={() => {\n                  onHoverTick(tick);\n                  setPaused(true);\n                }}\n                onMouseLeave={() => {\n                  onHoverTick();\n                  setPaused(false);\n                }}\n                onClick={() => {\n                  onSelectTick(tick);\n                }}\n              >\n                <Tooltip content={<TickTooltip tick={tick} />}>\n                  <div style={{width: tick.width + 'px', height: '80px'}}>\n                    {count > 0 ? count : null}\n                  </div>\n                </Tooltip>\n              </Tick>\n            );\n          })}\n          <NowIndicator\n            style={{\n              transform: `translateX(${getX(now, viewport.width, minX, fullRange)}px)`,\n            }}\n          />\n        </TicksWrapper>\n        <TimeAxisWrapper></TimeAxisWrapper>\n      </div>\n    </div>\n  );\n};\n\nconst TickTooltip = React.memo(({tick}: {tick: HistoryTickFragment | AssetDaemonTickFragment}) => {\n  const status = React.useMemo(() => {\n    if (tick.status === InstigationTickStatus.FAILURE) {\n      return 'Evaluation failed';\n    }\n    if (tick.status === InstigationTickStatus.STARTED) {\n      return 'Evaluating…';\n    }\n    const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n    if (isAssetDaemonTick) {\n      return `${tick.requestedAssetMaterializationCount} materialization${ifPlural(\n        tick.requestedAssetMaterializationCount,\n        '',\n        's',\n      )} requested`;\n    } else {\n      return `${tick.runs?.length || 0} run${ifPlural(tick.runs?.length, '', 's')} requested`;\n    }\n  }, [tick]);\n  const startTime = dayjs(1000 * tick.timestamp!);\n  const endTime = dayjs(tick.endTimestamp ? 1000 * tick.endTimestamp : Date.now());\n  const elapsedTime = startTime.to(endTime, true);\n  return (\n    <div>\n      <Caption as=\"div\">\n        {status} ({elapsedTime})\n      </Caption>\n      {tick.status === InstigationTickStatus.STARTED ? null : (\n        <Caption color={colorTextLight()}>Click for details</Caption>\n      )}\n    </div>\n  );\n});\n\nconst TicksWrapper = styled.div`\n  position: relative;\n  height: 100px;\n  padding: 10px 2px;\n  border-bottom: 1px solid ${colorKeylineDefault()};\n`;\n\nconst TimeAxisWrapper = styled.div`\n  height: 24px;\n`;\n\nconst Tick = styled.div<{status: InstigationTickStatus}>`\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  height: 80px;\n  will-change: transform, width;\n  border-radius: 2px;\n  div {\n    place-content: center;\n    display: grid;\n  }\n  color: ${colorBackgroundDefault()};\n  ${({status}) => `\n    background: ${COLOR_MAP[status]};\n    &:hover {\n      background: ${HoverColorMap[status]};\n    }\n  `}\n`;\n\nconst GridTick = styled.div`\n  position: absolute;\n  top: 0;\n  height: 124px;\n  will-change: transform;\n`;\nconst GridTickLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 108px;\n  width: 1px;\n  background: ${colorKeylineDefault()};\n`;\nconst GridTickTime = styled.div`\n  height: 16px;\n  position: absolute;\n  bottom: 0;\n  width: 100px;\n  margin-left: -24px;\n`;\n\nconst NowIndicator = styled.div`\n  position: absolute;\n  top: 0;\n  height: 126px;\n  width: 2px;\n  background: ${colorAccentPrimary()};\n  &:after {\n    content: 'Now';\n    position: absolute;\n    left: 0;\n    background: ${colorAccentPrimary()};\n    color: ${colorAccentReversed()};\n    bottom: 0;\n    font-size: 12px;\n    padding: 3px 4px;\n  }\n`;\n\nfunction getX(timestamp: number, viewportWidth: number, minX: number, timeRange: number) {\n  return (viewportWidth * (timestamp - minX)) / timeRange;\n}\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const filterPermissionedInstigationState = (\n  instigationState: BasicInstigationStateFragment,\n) => {\n  return (\n    (instigationState.hasStartPermission &&\n      instigationState.status === InstigationStatus.STOPPED) ||\n    (instigationState.hasStopPermission && instigationState.status === InstigationStatus.RUNNING)\n  );\n};\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const instigationStateSummary = (instigationStates: BasicInstigationStateFragment[]) => {\n  let anyOff = false;\n  let anyOn = false;\n\n  for (const state of instigationStates) {\n    const {status} = state;\n    if (status === InstigationStatus.RUNNING) {\n      anyOn = true;\n    } else if (status === InstigationStatus.STOPPED) {\n      anyOff = true;\n    }\n    if (anyOn && anyOff) {\n      break;\n    }\n  }\n\n  return {anyOff, anyOn};\n};\n","import React from 'react';\n\nexport type OpenWithIntent = 'not-open' | 'start' | 'stop';\n\ntype CompletionState = {completed: number; errors: {[id: string]: string}};\n\ntype DialogState = {\n  step: 'initial' | 'updating' | 'completed';\n  completion: CompletionState;\n};\n\ntype DialogAction =\n  | {type: 'reset'}\n  | {type: 'start'}\n  | {type: 'update-success'}\n  | {type: 'update-error'; name: string; error: string}\n  | {type: 'complete'};\n\nconst initialState: DialogState = {\n  step: 'initial',\n  completion: {completed: 0, errors: {}},\n};\n\nconst reducer = (prevState: DialogState, action: DialogAction): DialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'start':\n      return {...prevState, step: 'updating'};\n    case 'update-success': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {...completion, completed: completion.completed + 1},\n      };\n    }\n    case 'update-error': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {\n          ...completion,\n          completed: completion.completed + 1,\n          errors: {...completion.errors, [action.name]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const useInstigationStateReducer = () => React.useReducer(reducer, initialState);\n","import {InstigationTick, InstigationTickStatus} from '../graphql/types';\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nexport const truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nexport function isOldTickWithoutEndtimestamp(\n  tick: Pick<InstigationTick, 'timestamp' | 'endTimestamp' | 'status'>,\n) {\n  return tick.status !== InstigationTickStatus.STARTED && !tick.endTimestamp;\n}\n","import {gql} from '@apollo/client';\n\nexport const BASIC_INSTIGATION_STATE_FRAGMENT = gql`\n  fragment BasicInstigationStateFragment on InstigationState {\n    id\n    selectorId\n    status\n    hasStartPermission\n    hasStopPermission\n  }\n`;\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {gql, useQuery} from '@apollo/client';\nimport {NonIdealState, Spinner} from '@dagster-io/ui-components';\nimport React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\n\nimport {\n  PartitionRunListQuery,\n  PartitionRunListQueryVariables,\n} from './types/PartitionRunList.types';\n\ninterface PartitionRunListProps {\n  pipelineName: string;\n  partitionName: string;\n}\n\nexport const PartitionRunList = (props: PartitionRunListProps) => {\n  const {data, loading} = useQuery<PartitionRunListQuery, PartitionRunListQueryVariables>(\n    PARTITION_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          pipelineName: props.pipelineName,\n          tags: [{key: DagsterTag.Partition, value: props.partitionName}],\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n  return (\n    <div>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </div>\n  );\n};\n\nconst PARTITION_RUN_LIST_QUERY = gql`\n  query PartitionRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  DialogFooter,\n  Dialog,\n  Icon,\n  MenuItem,\n  Menu,\n  Popover,\n  useViewport,\n  colorKeylineDefault,\n  colorBackgroundDefault,\n  colorBackgroundDefaultHover,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {GraphQueryItem} from '../app/GraphQueryImpl';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetPartitionStatus} from '../assets/AssetPartitionStatus';\nimport {\n  PartitionHealthData,\n  PartitionHealthDimension,\n  partitionStatusAtIndex,\n  Range,\n} from '../assets/usePartitionHealthData';\nimport {GanttChartMode} from '../gantt/Constants';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {RunStatus} from '../graphql/types';\nimport {linkToRunEvent} from '../runs/RunUtils';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {MenuLink} from '../ui/MenuLink';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionRunList} from './PartitionRunList';\nimport {\n  BOX_SIZE,\n  GridColumn,\n  GridFloatingContainer,\n  LeftLabel,\n  TopLabel,\n  topLabelHeightForLabels,\n  TopLabelTilted,\n} from './RunMatrixUtils';\nimport {\n  PartitionStepStatusPipelineQuery,\n  PartitionStepStatusPipelineQueryVariables,\n} from './types/PartitionStepStatus.types';\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  MatrixStep,\n  PartitionRuns,\n  useMatrixData,\n  MatrixData,\n  PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT,\n  StatusSquareColor,\n} from './useMatrixData';\n\nconst BUFFER = 3;\n\nexport const getVisibleItemCount = (viewportWidth: number) =>\n  Math.ceil(viewportWidth / BOX_SIZE) - BUFFER;\n\ninterface PartitionRunSelection {\n  partitionName: string;\n  stepName?: string;\n}\n\ninterface PartitionStepStatusBaseProps {\n  offset: number;\n  setOffset: (val: number) => void;\n  setPageSize: (val: number) => void;\n  pipelineName: string;\n  partitionNames: string[];\n\n  runFilters?: RunFilterToken[];\n  setRunFilters?: (val: RunFilterToken[]) => void;\n}\n\nconst timeboundsOfPartitions = (partitionColumns: {steps: {unix: number}[]}[]) => {\n  let [minUnix, maxUnix] = [Date.now() / 1000, 1];\n  for (const partition of partitionColumns) {\n    for (const step of partition.steps) {\n      if (step.unix === 0) {\n        continue;\n      }\n      [minUnix, maxUnix] = [Math.min(minUnix, step.unix), Math.max(maxUnix, step.unix)];\n    }\n  }\n  return [minUnix, maxUnix] as const;\n};\n\ninterface PartitionPerAssetStatusProps\n  extends Omit<PartitionStepStatusBaseProps, 'partitionNames'> {\n  assetHealth: PartitionHealthData[];\n  assetQueryItems: GraphQueryItem[];\n  rangeDimensionIdx: number;\n  rangeDimension: PartitionHealthDimension;\n}\n\nexport const PartitionPerAssetStatus = ({\n  assetHealth,\n  rangeDimension,\n  rangeDimensionIdx,\n  assetQueryItems,\n  ...rest\n}: PartitionPerAssetStatusProps) => {\n  const rangesByAssetKey: {[assetKey: string]: Range[]} = {};\n  for (const a of assetHealth) {\n    if (a.dimensions[rangeDimensionIdx]?.name !== rangeDimension.name) {\n      // Ignore assets in the job / graph that do not have the range partition dimension.\n      continue;\n    }\n    const ranges = a.rangesForSingleDimension(rangeDimensionIdx);\n    rangesByAssetKey[tokenForAssetKey(a.assetKey)] = ranges;\n  }\n\n  const layout = buildLayout({nodes: assetQueryItems, mode: GanttChartMode.FLAT});\n  const layoutBoxesWithRangeDimension = layout.boxes.filter((b) => !!rangesByAssetKey[b.node.name]);\n\n  const data: MatrixData = {\n    stepRows: layoutBoxesWithRangeDimension.map((box) => ({\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: 0,\n      finalFailurePercent: 0,\n    })),\n    partitions: [],\n    partitionColumns: rangeDimension.partitionKeys.map((partitionKey, partitionKeyIdx) => ({\n      idx: partitionKeyIdx,\n      name: partitionKey,\n      runsLoaded: true,\n      runs: [],\n      steps: layoutBoxesWithRangeDimension.map((box) => ({\n        name: box.node.name,\n        unix: 0,\n        color: assetPartitionStatusToSquareColor(\n          partitionStatusAtIndex(rangesByAssetKey[box.node.name]!, partitionKeyIdx),\n        ),\n      })),\n    })),\n  };\n\n  return (\n    <PartitionStepStatus\n      {...rest}\n      partitionNames={rangeDimension.partitionKeys}\n      data={data}\n      showLatestRun={false}\n    />\n  );\n};\n\nconst assetPartitionStatusToSquareColor = (state: AssetPartitionStatus[]): StatusSquareColor => {\n  return state.includes(AssetPartitionStatus.MATERIALIZED) &&\n    state.includes(AssetPartitionStatus.MISSING)\n    ? 'SUCCESS-MISSING'\n    : state.includes(AssetPartitionStatus.MATERIALIZED)\n    ? 'SUCCESS'\n    : state.includes(AssetPartitionStatus.FAILED) && state.includes(AssetPartitionStatus.MISSING)\n    ? 'FAILURE-MISSING'\n    : state.includes(AssetPartitionStatus.FAILED)\n    ? 'FAILURE'\n    : 'MISSING';\n};\n\ninterface PartitionPerOpStatusProps extends PartitionStepStatusBaseProps {\n  repoAddress: RepoAddress;\n  partitions: PartitionRuns[];\n}\n\nexport const PartitionPerOpStatus = ({\n  repoAddress,\n  pipelineName,\n  partitions,\n  partitionNames,\n  ...rest\n}: PartitionPerOpStatusProps) => {\n  // Retrieve the pipeline's structure\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const pipelineSelector = {...repositorySelector, pipelineName};\n  const pipeline = useQuery<\n    PartitionStepStatusPipelineQuery,\n    PartitionStepStatusPipelineQueryVariables\n  >(PARTITION_STEP_STATUS_PIPELINE_QUERY, {\n    variables: {pipelineSelector},\n  });\n\n  const solidHandles =\n    pipeline.data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n    pipeline.data.pipelineSnapshotOrError.solidHandles;\n\n  const data = useMatrixData({\n    partitionNames,\n    partitions,\n    stepQuery: '',\n    solidHandles,\n  });\n\n  if (!data) {\n    return <span />;\n  }\n  return (\n    <PartitionStepStatus\n      {...rest}\n      showLatestRun={true}\n      pipelineName={pipelineName}\n      partitionNames={partitionNames}\n      data={data}\n    />\n  );\n};\n\ninterface PartitionStepStatusProps extends PartitionStepStatusBaseProps {\n  data: MatrixData;\n  showLatestRun: boolean;\n}\n\nconst PartitionStepStatus = (props: PartitionStepStatusProps) => {\n  const {viewport, containerProps} = useViewport();\n  const [hovered, setHovered] = React.useState<PartitionRunSelection | null>(null);\n  const [focused, setFocused] = React.useState<PartitionRunSelection | null>(null);\n  const {setPageSize, data} = props;\n\n  React.useEffect(() => {\n    if (viewport.width) {\n      setPageSize(getVisibleItemCount(viewport.width));\n    }\n  }, [viewport.width, setPageSize]);\n\n  const {stepRows, partitionColumns} = data;\n\n  const sortPartitionSteps = (steps: MatrixStep[]) => {\n    const stepsByName = {};\n    steps.forEach((step) => ((stepsByName as any)[step.name] = step));\n    return stepRows.map((stepRow) => (stepsByName as any)[stepRow.name]);\n  };\n\n  const visibleCount = getVisibleItemCount(viewport.width);\n  const visibleStart = Math.max(0, partitionColumns.length - props.offset - visibleCount);\n  const visibleEnd = Math.max(visibleCount, partitionColumns.length - props.offset);\n  const visibleColumns = partitionColumns.slice(visibleStart, visibleEnd);\n  const [minUnix, maxUnix] = timeboundsOfPartitions(partitionColumns);\n  const topLabelHeight = topLabelHeightForLabels(partitionColumns.map((p) => p.name));\n\n  return (\n    <PartitionRunMatrixContainer>\n      <Dialog\n        isOpen={!!focused}\n        onClose={() => setFocused(null)}\n        style={{width: '90vw'}}\n        title={focused ? `${focused.partitionName} runs` : ''}\n      >\n        <Box padding={{bottom: 12}}>\n          {focused && (\n            <PartitionRunList\n              pipelineName={props.pipelineName}\n              partitionName={focused.partitionName}\n            />\n          )}\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" autoFocus={true} onClick={() => setFocused(null)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <div\n        style={{\n          position: 'relative',\n          display: 'flex',\n        }}\n      >\n        <GridFloatingContainer floating={props.offset + visibleCount < props.partitionNames.length}>\n          <GridColumn disabled style={{flex: 1, flexShrink: 1, overflow: 'hidden'}}>\n            <TopLabel style={{height: topLabelHeight}} />\n            {props.showLatestRun && <LeftLabel style={{paddingLeft: 24}}>Last Run</LeftLabel>}\n            <Divider />\n            {stepRows.map((step) => (\n              <LeftLabel\n                style={{paddingLeft: 8 + step.x}}\n                key={step.name}\n                data-tooltip={step.name}\n                hovered={step.name === hovered?.stepName}\n              >\n                {step.name}\n              </LeftLabel>\n            ))}\n          </GridColumn>\n        </GridFloatingContainer>\n\n        {props.offset + visibleCount < props.partitionNames.length ? (\n          <PagerControl\n            $direction=\"left\"\n            onClick={() =>\n              props.setOffset(\n                Math.max(\n                  0,\n                  Math.min(\n                    props.offset + visibleCount - 1,\n                    props.partitionNames.length - visibleCount,\n                  ),\n                ),\n              )\n            }\n          >\n            <Icon name=\"chevron_left\" />\n          </PagerControl>\n        ) : null}\n        <div style={{flex: 1, overflow: 'hidden', position: 'relative'}} {...containerProps}>\n          <div\n            style={{\n              width: partitionColumns.length * BOX_SIZE,\n              position: 'absolute',\n              height: '100%',\n              right: 0,\n              zIndex: 1,\n            }}\n          >\n            {visibleColumns.map((p, idx) => (\n              <GridColumn\n                key={p.name}\n                style={{\n                  zIndex: visibleColumns.length - idx,\n                  width: BOX_SIZE,\n                  position: 'absolute',\n                  right: (visibleCount - idx) * BOX_SIZE + 20,\n                }}\n              >\n                <TopLabelTilted $height={topLabelHeight} label={p.name} />\n                {props.showLatestRun && (\n                  <LeftLabel style={{textAlign: 'center'}}>\n                    <PartitionSquare\n                      key={`${p.name}:__full_status`}\n                      runs={p.runs}\n                      runsLoaded={p.runsLoaded}\n                      minUnix={minUnix}\n                      maxUnix={maxUnix}\n                      hovered={hovered}\n                      setHovered={setHovered}\n                      setFocused={setFocused}\n                      partitionName={p.name}\n                    />\n                  </LeftLabel>\n                )}\n                <Divider />\n                {sortPartitionSteps(p.steps).map((s) => (\n                  <PartitionSquare\n                    key={s.name}\n                    step={s}\n                    runs={p.runs}\n                    runsLoaded={p.runsLoaded}\n                    minUnix={minUnix}\n                    maxUnix={maxUnix}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setFocused={setFocused}\n                    partitionName={p.name}\n                  />\n                ))}\n              </GridColumn>\n            ))}\n          </div>\n        </div>\n        {props.offset > 0 ? (\n          <PagerControl\n            $direction=\"right\"\n            onClick={() => props.setOffset(Math.max(0, props.offset - visibleCount))}\n          >\n            <Icon name=\"chevron_right\" />\n          </PagerControl>\n        ) : null}\n      </div>\n    </PartitionRunMatrixContainer>\n  );\n};\n\nconst PagerControl = styled.div<{$direction: 'left' | 'right'}>`\n  width: 30px;\n  position: absolute;\n  border: 1px solid ${colorKeylineDefault()};\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: calc(50% - 15px);\n  bottom: calc(50% - 15px);\n  ${({$direction}) => ($direction === 'left' ? 'left: 315px;' : 'right: 0;')}\n  background: ${colorBackgroundDefault()};\n  z-index: 10;\n\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  &:hover {\n    background: ${colorBackgroundDefaultHover()};\n  }\n`;\n\nconst PartitionRunMatrixContainer = styled.div`\n  display: block;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 5px;\n  border-top: 1px solid ${colorKeylineDefault()};\n`;\n\n// add in the explorer fragment, so we can reconstruct the faux-plan steps from the exploded plan\n// in the same way we construct the explorer graph\nconst PARTITION_STEP_STATUS_PIPELINE_QUERY = gql`\n  query PartitionStepStatusPipelineQuery($pipelineSelector: PipelineSelector) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          ...PartitionMatrixSolidHandleFragment\n        }\n      }\n    }\n  }\n\n  ${PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT}\n`;\n\nconst TOOLTIP_STYLE = JSON.stringify({\n  top: 20,\n  left: 10,\n});\n\nconst PartitionSquare = ({\n  step,\n  runs,\n  runsLoaded,\n  hovered,\n  setHovered,\n  setFocused,\n  partitionName,\n}: {\n  step?: MatrixStep;\n  runs: PartitionMatrixStepRunFragment[];\n  runsLoaded: boolean;\n  hovered: PartitionRunSelection | null;\n  minUnix: number;\n  maxUnix: number;\n  partitionName: string;\n  setHovered: (hovered: PartitionRunSelection | null) => void;\n  setFocused: (hovered: PartitionRunSelection | null) => void;\n}) => {\n  const [opened, setOpened] = React.useState(false);\n  let squareStatus;\n\n  if (!runsLoaded) {\n    squareStatus = 'loading';\n  } else if (step) {\n    squareStatus = step.color.toLowerCase();\n  } else if (runs.length === 0) {\n    squareStatus = 'empty';\n  } else {\n    const runStatus = [...runs].reverse().find((r) => r.status !== RunStatus.CANCELED)?.status;\n    if (runStatus) {\n      squareStatus = runStatus.toLowerCase();\n    } else {\n      squareStatus = 'empty';\n    }\n  }\n  const content = (\n    <div\n      className={`square ${squareStatus}`}\n      onMouseEnter={() => setHovered({stepName: step?.name, partitionName})}\n      onMouseLeave={() => setHovered(null)}\n      data-tooltip={\n        runsLoaded && !step ? (runs.length === 1 ? `1 run` : `${runs.length} runs`) : undefined\n      }\n      data-tooltip-style={TOOLTIP_STYLE}\n    />\n  );\n\n  if (\n    !opened &&\n    (!runs.length || hovered?.stepName !== step?.name || hovered?.partitionName !== partitionName)\n  ) {\n    return content;\n  }\n\n  return (\n    <Popover\n      interactionKind=\"click\"\n      placement=\"bottom-start\"\n      onOpening={() => setOpened(true)}\n      onClosed={() => setOpened(false)}\n      content={\n        <Menu>\n          <MenuLink\n            icon=\"open_in_new\"\n            text=\"Show logs from last run\"\n            to={linkToRunEvent(runs[runs.length - 1]!, {stepKey: step ? step.name : null})}\n          />\n          <MenuItem\n            icon=\"settings_backup_restore\"\n            text={`View runs (${runs.length})`}\n            onClick={() => setFocused({stepName: step?.name, partitionName})}\n          />\n        </Menu>\n      }\n    >\n      {content}\n    </Popover>\n  );\n};\n","import {\n  colorAccentBlue,\n  colorAccentBlueHover,\n  colorAccentGray,\n  colorAccentGreen,\n  colorAccentGreenHover,\n  colorAccentPrimary,\n  colorAccentRed,\n  colorAccentRedHover,\n  colorAccentReversed,\n  colorAccentYellow,\n  colorBackgroundDefaultHover,\n  colorBackgroundGray,\n  colorBackgroundGrayHover,\n  colorBackgroundLight,\n  colorBorderDefault,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nexport const BOX_SIZE = 32;\n\nconst STEP_STATUS_COLORS = {\n  SUCCESS: colorAccentGreen(),\n  SUCCESS_SKIPPED: colorAccentGreenHover(),\n  FAILURE: colorAccentRed(),\n  FAILURE_SKIPPED: colorAccentRedHover(),\n  SKIPPED: colorAccentYellow(),\n  IN_PROGRESS: colorAccentBlue(),\n};\n\n// In CSS, you can layer multiple backgrounds on top of each other by comma-separating values in\n// `background`. However, this only works with gradients, not with primitive color values. To do\n// hovered + red without color math (?), just stack the colors as flat gradients.\nconst flatGradient = (color: string) => `linear-gradient(to left, ${color} 0%, ${color} 100%)`;\nconst flatGradientStack = (colors: string[]) => colors.map(flatGradient).join(',');\n\nexport const GridColumn = styled.div<{\n  disabled?: boolean;\n  hovered?: boolean;\n  focused?: boolean;\n  multiselectFocused?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  line-height: 0;\n\n  ${({disabled, focused, multiselectFocused, hovered}) =>\n    !disabled &&\n    !focused &&\n    !multiselectFocused &&\n    `&${hovered ? '' : ':hover'} {\n      background: ${colorBackgroundDefaultHover()};\n      cursor: default;\n      ${TopLabelTiltedInner} {\n        background: ${colorBackgroundDefaultHover()};\n        .tilted {\n          background: ${colorBackgroundLight()};\n        }\n      }\n      .square {\n        filter: brightness(95%);\n      }\n    }`}\n\n  ${({disabled}) =>\n    disabled &&\n    `\n      ${TopLabelTiltedInner} {\n        color: ${colorTextLight()}\n      }\n    `}\n\n  ${({focused}) =>\n    focused &&\n    `background: ${colorAccentBlue()};\n    ${LeftLabel} {\n      color: ${colorAccentReversed()};\n    }\n    ${TopLabelTiltedInner} {\n      background: ${colorAccentPrimary()};\n      color: ${colorAccentReversed()};\n      .tilted {\n        background: ${colorAccentBlue()};\n      }\n    }\n  }`}\n\n  ${({multiselectFocused}) =>\n    multiselectFocused &&\n    `background: ${colorAccentBlueHover()};\n    ${LeftLabel} {\n      color: ${colorAccentReversed()};\n    }\n    ${TopLabelTiltedInner} {\n      background: ${colorAccentPrimary()};\n      color: ${colorAccentReversed()};\n      .tilted {\n        background: ${colorAccentBlueHover()};\n      }\n    }\n  }`}\n\n  .cell {\n    height: ${BOX_SIZE}px;\n    display: inline-block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-size: 12px;\n    padding: 2px;\n    box-sizing: border-box;\n    line-height: initial;\n  }\n\n  .square {\n    width: 20px;\n    height: 20px;\n    margin: 6px;\n    display: inline-block;\n\n    &:hover:not(.empty):before {\n      box-shadow: ${colorAccentBlue()} 0 0 0 3px;\n    }\n    &:before {\n      content: ' ';\n      background: ${colorAccentGray()};\n      border-radius: 10px;\n      display: inline-block;\n      width: 20px;\n      height: 20px;\n    }\n    &.loading {\n      &:before {\n        background: radial-gradient(\n          ${colorBackgroundGray()} 0%,\n          ${colorBackgroundGray()} 45%,\n          ${colorBackgroundGrayHover()} 60%\n        );\n      }\n    }\n    &.success {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS};\n      }\n    }\n    &.failure {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE};\n      }\n    }\n    &.success-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS_SKIPPED};\n      }\n    }\n    &.failure-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.failure-blank {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.skipped {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SKIPPED};\n      }\n    }\n    &.started,\n    &.starting,\n    &.canceling {\n      &:before {\n        background: ${STEP_STATUS_COLORS.IN_PROGRESS};\n      }\n    }\n  }\n`;\n\nexport const LeftLabel = styled.div<{hovered?: boolean}>`\n  height: ${BOX_SIZE}px;\n  line-height: ${BOX_SIZE}px;\n  font-size: 13px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  position: relative;\n  background: ${({hovered}) =>\n    flatGradientStack([hovered ? colorBackgroundLight() : 'transparent'])};\n`;\n\nexport const TopLabel = styled.div`\n  position: relative;\n  height: 70px;\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  align-items: flex-end;\n  display: flex;\n`;\n\nconst TITLE_MARGIN_BOTTOM = 15;\nconst ROTATION_DEGREES = 41;\n\nexport function topLabelHeightForLabels(labels: string[]) {\n  const maxlength = Math.max(...labels.map((p) => p.length));\n  return (maxlength > 10 ? maxlength * 4.9 : 55) + TITLE_MARGIN_BOTTOM;\n}\n\nexport const TopLabelTilted = ({label, $height}: {label: string; $height: number}) => {\n  return (\n    <TopLabelTiltedInner style={{height: $height - TITLE_MARGIN_BOTTOM}}>\n      <div className=\"tilted\">{label}</div>\n    </TopLabelTiltedInner>\n  );\n};\n\nconst TopLabelTiltedInner = styled.div`\n  position: relative;\n  height: unset; /* provide via style tag */\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  margin-bottom: ${TITLE_MARGIN_BOTTOM}px;\n  align-items: end;\n  display: flex;\n  line-height: normal;\n\n  & > div.tilted {\n    font-size: 12px;\n    white-space: nowrap;\n    position: absolute;\n    bottom: -20px;\n    left: 0;\n    padding: 2px;\n    padding-right: 4px;\n    padding-left: 0;\n    transform: rotate(-${ROTATION_DEGREES}deg);\n    transform-origin: top left;\n  }\n`;\n\nexport const GRID_FLOATING_CONTAINER_WIDTH = 330;\n\nexport const GridFloatingContainer = styled.div<{floating: boolean}>`\n  display: flex;\n  border-right: 1px solid ${colorBorderDefault()};\n  padding-bottom: 16px;\n  width: ${GRID_FLOATING_CONTAINER_WIDTH}px;\n  z-index: 1;\n  ${({floating}) => (floating ? 'box-shadow: 1px 0 4px rgba(0, 0, 0, 0.15)' : '')};\n`;\n","import {gql} from '@apollo/client';\nimport {shallowCompareKeys} from '@blueprintjs/core/lib/cjs/common/utils';\nimport React from 'react';\n\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {GanttChartLayout} from '../gantt/Constants';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {StepEventStatus} from '../graphql/types';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\n\nimport {\n  PartitionMatrixStepRunFragment,\n  PartitionMatrixSolidHandleFragment,\n} from './types/useMatrixData.types';\n\nexport type StatusSquareColor =\n  | 'SUCCESS'\n  | 'FAILURE'\n  | 'MISSING'\n  | 'FAILURE-MISSING'\n  | 'SUCCESS-MISSING';\n\nexport interface PartitionRuns {\n  name: string;\n  runsLoaded: boolean;\n  runs: PartitionMatrixStepRunFragment[];\n}\n\ninterface DisplayOptions {\n  showFailuresAndGapsOnly: boolean;\n  showPrevious: boolean;\n  colorizeByAge: boolean;\n  colorizeSliceUnix: number;\n}\n\nconst DYNAMIC_STEP_REGEX_SUFFIX = '\\\\[.*\\\\]';\n\nexport interface MatrixStep {\n  name: string;\n  color: string;\n  unix: number;\n}\n\nconst MISSING_STEP_STATUSES = new Set([StepEventStatus.IN_PROGRESS, StepEventStatus.SKIPPED]);\n\nfunction getStartTime(a: PartitionMatrixStepRunFragment) {\n  return a.startTime || 0;\n}\n\nfunction byStartTimeAsc(a: PartitionMatrixStepRunFragment, b: PartitionMatrixStepRunFragment) {\n  return getStartTime(a) - getStartTime(b);\n}\n\n// BG Note: Dagster 0.10.0 removed the .compute step key suffix, but the Run Matrix takes the current\n// step tree and looks up data for each step in historical runs. For continuity across 0.10.0, we\n// match historical step keys with the .compute format as well. We can remove safely after 120 days?\nfunction isStepKeyForNode(nodeName: string, stepKey: string) {\n  const dynamicRegex = new RegExp(nodeName + DYNAMIC_STEP_REGEX_SUFFIX);\n  return stepKey === nodeName || stepKey === `${nodeName}.compute` || stepKey.match(dynamicRegex);\n}\n\nfunction buildMatrixData(\n  layout: GanttChartLayout,\n  partitionNames: string[],\n  partitions: PartitionRuns[],\n  options?: DisplayOptions,\n) {\n  const partitionsByName = {};\n  partitions.forEach((p) => {\n    // Note this is sorting partition runs in place, I don't think it matters and\n    // seems better than cloning all the arrays.\n    p.runs.sort(byStartTimeAsc);\n    (partitionsByName as any)[p.name] = p;\n  });\n\n  const partitionColumns = partitionNames.map((name, idx) => {\n    const partition: PartitionRuns = (partitionsByName as any)[name] || {\n      name,\n      runsLoaded: false,\n      runs: [],\n    };\n    const steps = layout.boxes.map(({node}) => {\n      const blankState = {\n        name: node.name,\n        color: 'MISSING' as StatusSquareColor,\n        unix: 0,\n      };\n\n      if (!partition.runs.length) {\n        return blankState;\n      }\n\n      const lastRun = partition.runs[partition.runs.length - 1]!;\n      const lastRunStepStatus = lastRun.stepStats.find((stats) =>\n        isStepKeyForNode(node.name, stats.stepKey),\n      )?.status;\n\n      let previousRunStatus;\n      if (\n        partition.runs.length > 1 &&\n        (!lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus))\n      ) {\n        let idx = partition.runs.length - 2;\n        while (idx >= 0 && !previousRunStatus) {\n          const currRun = partition.runs[idx]!;\n          const currRunStatus = currRun.stepStats.find((stats) =>\n            isStepKeyForNode(node.name, stats.stepKey),\n          )?.status;\n          if (currRunStatus && !MISSING_STEP_STATUSES.has(currRunStatus)) {\n            previousRunStatus = currRunStatus;\n            break;\n          }\n          idx--;\n        }\n      }\n\n      if (!lastRunStepStatus && !previousRunStatus) {\n        return blankState;\n      }\n\n      const color: StatusSquareColor =\n        !lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus)\n          ? (`${previousRunStatus}-MISSING` as StatusSquareColor)\n          : (lastRunStepStatus as StatusSquareColor);\n      return {\n        name: node.name,\n        unix: getStartTime(lastRun),\n        color,\n      };\n    });\n    return {\n      ...partition,\n      steps,\n      idx,\n    };\n  });\n\n  const partitionsWithARun = partitionColumns.filter((p) => p.runs.length > 0).length;\n\n  const stepRows = layout.boxes.map((box, idx) => {\n    const totalFailures = partitionColumns.filter((p) => p.steps[idx]!.color.includes('FAILURE'));\n    const finalFailures = partitionColumns.filter((p) => p.steps[idx]!.color.endsWith('FAILURE'));\n    return {\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: partitionsWithARun\n        ? Math.round((totalFailures.length / partitionsWithARun) * 100)\n        : 0,\n      finalFailurePercent: partitionsWithARun\n        ? Math.round((finalFailures.length / partitionsWithARun) * 100)\n        : 0,\n    };\n  });\n\n  if (options?.showFailuresAndGapsOnly) {\n    for (let ii = stepRows.length - 1; ii >= 0; ii--) {\n      if (stepRows[ii]!.finalFailurePercent === 0) {\n        stepRows.splice(ii, 1);\n        partitionColumns.forEach((p) => p.steps.splice(ii, 1));\n      }\n    }\n    for (let ii = partitionColumns.length - 1; ii >= 0; ii--) {\n      if (\n        partitionColumns[ii]!.runs.length === 0 ||\n        partitionColumns[ii]!.steps.every((step) => step.color.includes('SUCCESS'))\n      ) {\n        partitionColumns.splice(ii, 1);\n      }\n    }\n  }\n\n  return {stepRows, partitions, partitionColumns};\n}\n\ninterface MatrixDataInputs {\n  solidHandles: PartitionMatrixSolidHandleFragment[] | false;\n  partitionNames: string[];\n  partitions: PartitionRuns[];\n  stepQuery: string;\n  options?: DisplayOptions;\n}\n\nexport type MatrixData = ReturnType<typeof buildMatrixData>;\n\n/**\n * This hook uses the inputs provided to filter the data displayed and calls through to buildMatrixData.\n * It uses a React ref to cache the result and avoids re-computing when all inputs are shallow-equal.\n *\n * - This could alternatively be implemented via React.memo and an outer + inner component pair, but I\n *   didn't want to split <PartitionRunMatrix />\n * - This can't be a React useEffect with an array of deps because we want the cached value to be updated\n *   synchronously when the inputs are modified to avoid a double-render caused by an effect + state var.\n *\n * @param inputs\n */\nexport const useMatrixData = (inputs: MatrixDataInputs) => {\n  const cachedMatrixData = React.useRef<{\n    result: MatrixData;\n    inputs: MatrixDataInputs;\n  }>();\n  if (!inputs.solidHandles) {\n    return null;\n  }\n  if (cachedMatrixData.current && shallowCompareKeys(inputs, cachedMatrixData.current.inputs)) {\n    return cachedMatrixData.current.result;\n  }\n\n  const nodes = explodeCompositesInHandleGraph(inputs.solidHandles).map((h) => h.solid);\n\n  // Filter the pipeline's structure and build the flat gantt layout for the left hand side\n  const solidsFiltered = filterByQuery(nodes, inputs.stepQuery);\n\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n\n  // Build the matrix of step + partition squares - presorted to match the gantt layout\n  const result = buildMatrixData(layout, inputs.partitionNames, inputs.partitions, inputs.options);\n  cachedMatrixData.current = {result, inputs};\n  return result;\n};\n\nexport const PARTITION_MATRIX_STEP_RUN_FRAGMENT = gql`\n  fragment PartitionMatrixStepRunFragment on Run {\n    id\n    status\n    startTime\n    endTime\n    stepStats {\n      stepKey\n      startTime\n      endTime\n      status\n    }\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT = gql`\n  fragment PartitionMatrixSolidHandleFragment on SolidHandle {\n    handleID\n    solid {\n      name\n      definition {\n        name\n      }\n      inputs {\n        dependsOn {\n          solid {\n            name\n          }\n        }\n      }\n      outputs {\n        dependedBy {\n          solid {\n            name\n          }\n        }\n      }\n    }\n    ...GraphExplorerSolidHandleFragment\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n","import {useApolloClient, ApolloClient, gql} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {RepositorySelector, RunStatus} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\n\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  PartitionStepLoaderQueryVariables,\n  PartitionStepLoaderQuery,\n} from './types/usePartitionStepQuery.types';\nimport {PartitionRuns, PARTITION_MATRIX_STEP_RUN_FRAGMENT} from './useMatrixData';\n\ninterface DataState {\n  runs: PartitionMatrixStepRunFragment[];\n  partitionNames: string[];\n  loading: boolean;\n  loadingCursorIdx: number;\n  error?: PythonErrorFragment;\n}\n\nconst InitialDataState: DataState = {\n  runs: [],\n  partitionNames: [],\n  loading: false,\n  loadingCursorIdx: 0,\n};\n\ntype PartitionStepQueryOptions = {\n  partitionSetName: string;\n  partitionTagName: string;\n  partitionNames: string[];\n  pageSize: number;\n  runsFilter: RunFilterToken[];\n  repositorySelector: RepositorySelector;\n  jobName?: string;\n  offset?: number;\n  skipQuery?: boolean;\n};\n\n/**\n * This React hook mirrors `useCursorPaginatedQuery` but collects each page of partitions\n * in slices that are smaller than pageSize and cause the results to load incrementally.\n */\nexport function usePartitionStepQuery({\n  partitionSetName,\n  partitionTagName,\n  partitionNames,\n  pageSize,\n  runsFilter,\n  jobName,\n  repositorySelector,\n  offset,\n  skipQuery,\n}: PartitionStepQueryOptions) {\n  const client = useApolloClient();\n\n  const version = React.useRef(0);\n  const [dataState, setDataState] = React.useState<DataState>(InitialDataState);\n\n  const _serializedRunTags = JSON.stringify([\n    ...runsFilter.map((token) => {\n      const [key, value] = token.value.split('=');\n      return {key, value};\n    }),\n    {\n      key: DagsterTag.RepositoryLabelTag,\n      value: `${repositorySelector.repositoryName}@${repositorySelector.repositoryLocationName}`,\n    },\n  ]);\n\n  React.useEffect(() => {\n    // Note: there are several async steps to the loading process - to cancel the previous\n    // invocation, we bump a version number that is captured in a local variable.\n    // eg: If version.current no longer === v, this should stop updating state and exit.\n    const v = version.current + 1;\n    version.current = v;\n\n    const runTags = JSON.parse(_serializedRunTags);\n    setDataState((dataState) => ({...dataState, runs: [], loading: true}));\n\n    const run = async () => {\n      if (version.current !== v) {\n        return;\n      }\n      let loadingCursorIdx = partitionNames.length - (offset || 0);\n      const stopIdx = Math.max(0, loadingCursorIdx - pageSize);\n      setDataState((state) => ({...state, partitionNames, loadingCursorIdx}));\n\n      // Load runs in each of these partitions incrementally, running several queries in parallel\n      // to maximize the throughput we can achieve from the GraphQL interface.\n      const parallelQueries = 5;\n\n      while (loadingCursorIdx > stopIdx) {\n        const nextCursorIdx = Math.max(loadingCursorIdx - parallelQueries, 0);\n        const sliceNames = partitionNames.slice(nextCursorIdx, loadingCursorIdx);\n        const fetched = await Promise.all(\n          sliceNames.map((partitionName) => {\n            const partitionSetTag = {key: DagsterTag.PartitionSet, value: partitionSetName};\n            const partitionTag = {key: partitionTagName, value: partitionName};\n            // for jobs, filter by pipelineName/jobName instead of by partition set tag.  This\n            // preserves partition run history across the pipeline => job transition\n            const runTagsFilter = jobName\n              ? {\n                  pipelineName: jobName,\n                  tags: [...runTags, partitionTag],\n                }\n              : {tags: [...runTags, partitionTag, partitionSetTag]};\n            return fetchRunsForFilter(client, {limit: 1000, filter: runTagsFilter});\n          }),\n        );\n        if (version.current !== v) {\n          return;\n        }\n\n        loadingCursorIdx = nextCursorIdx;\n        setDataState((state) => ({\n          ...state,\n          runs: [...state.runs].concat(...fetched),\n          loading: loadingCursorIdx > 0,\n          loadingCursorIdx,\n        }));\n      }\n\n      // Periodically refresh pending runs and look for new runs in the displayed partitions.\n      // Note: this timer is canceled when a subsequent invocation of the useEffect updates `version.current`,\n      // because we don't want to create this interval until the initial load completes.\n\n      const timer: NodeJS.Timeout = setInterval(async () => {\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        setDataState((state) => ({...state, loading: true}));\n\n        // Fetch the 10 most recent runs for the pipeline so we pick up on new runs being launched.\n        // Note: this may be insufficient but seems like it will handle the 99% case where runs\n        // are either all queued (at the backfill start) or queued sequentially / slowly.\n        const recent = await fetchRunsForFilter(client, {\n          limit: 10,\n          filter: {\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        // Fetch runs in the partition set that are in the STARTED state, indicating active updates\n        const pending = await fetchRunsForFilter(client, {\n          filter: {\n            statuses: [RunStatus.STARTED],\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        // Filter detected changes to just runs in our visible range of partitions, and then update\n        // local state if changes have been found.\n        const relevant = [...pending, ...recent].filter((run) =>\n          run.tags.find((t) => t.key === partitionTagName && partitionNames.includes(t.value)),\n        );\n        setDataState((state) => {\n          const updated = state.runs\n            .filter((r) => !relevant.some((o) => o.id === r.id))\n            .concat(relevant);\n          return {...state, loading: false, runs: updated};\n        });\n      }, 10 * 1000);\n    };\n\n    if (!skipQuery) {\n      run();\n    }\n\n    return () => {\n      version.current += 1;\n    };\n  }, [\n    pageSize,\n    client,\n    partitionSetName,\n    partitionTagName,\n    _serializedRunTags,\n    jobName,\n    offset,\n    partitionNames,\n    skipQuery,\n  ]);\n\n  return assemblePartitions(dataState, partitionTagName);\n}\n\nasync function fetchRunsForFilter(\n  client: ApolloClient<any>,\n  variables: PartitionStepLoaderQueryVariables,\n) {\n  const result = await client.query<PartitionStepLoaderQuery, PartitionStepLoaderQueryVariables>({\n    fetchPolicy: 'network-only',\n    query: PARTITION_STEP_LOADER_QUERY,\n    variables,\n  });\n  return (\n    (result.data.pipelineRunsOrError.__typename === 'Runs' &&\n      result.data.pipelineRunsOrError.results) ||\n    []\n  );\n}\n\nfunction assemblePartitions(data: DataState, partitionTagName: string) {\n  // Note: Partitions don't have any unique keys beside their names, so we use names\n  // extensively in our display layer as React keys. To create unique empty partitions\n  // we use different numbers of zero-width space characters\n  const results: PartitionRuns[] = [];\n  const byName: {[name: string]: PartitionRuns} = {};\n\n  data.partitionNames.forEach((name, idx) => {\n    byName[name] = {\n      name,\n      runsLoaded: idx >= data.loadingCursorIdx,\n      runs: [],\n    };\n    results.push(byName[name]!);\n  });\n\n  data.runs.forEach((r) => {\n    const partitionName = r.tags.find((t) => t.key === partitionTagName)?.value || '';\n    byName[partitionName]?.runs.push(r);\n  });\n\n  return results;\n}\n\nconst PARTITION_STEP_LOADER_QUERY = gql`\n  query PartitionStepLoaderQuery($filter: RunsFilter!, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, cursor: $cursor, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ...PartitionMatrixStepRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PARTITION_MATRIX_STEP_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Tabs, Tag} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {useRouteMatch} from 'react-router-dom';\n\nimport {TabLink} from '../ui/TabLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nconst titles: {[key: string]: string} = {\n  configuration: 'Configuration',\n  uses: 'Uses',\n};\n\nexport const ResourceTabs = (props: {\n  repoAddress: RepoAddress;\n  resourceName: string;\n  numUses: number;\n}) => {\n  const {repoAddress, resourceName, numUses} = props;\n\n  const match = useRouteMatch<{tab?: string; selector: string}>([\n    '/locations/:repoPath/resources/:name/:tab?',\n  ]);\n\n  const active = (match?.params.tab && titles[match?.params.tab]) || 'Configuration';\n\n  return (\n    <>\n      <Tabs size=\"large\" selectedTabId={active}>\n        <TabLink\n          key=\"configuration\"\n          id=\"Configuration\"\n          title=\"Configuration\"\n          to={workspacePathFromAddress(repoAddress, `/resources/${resourceName}`)}\n        />\n        <TabLink\n          key=\"uses\"\n          id=\"Uses\"\n          title={\n            <Box flex={{gap: 4, alignItems: 'center'}}>\n              Uses\n              <Tag intent=\"none\" minimal={true}>\n                {numUses}\n              </Tag>\n            </Box>\n          }\n          to={workspacePathFromAddress(repoAddress, `/resources/${resourceName}/uses`)}\n        />\n      </Tabs>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  ButtonLink,\n  CaptionMono,\n  Group,\n  Heading,\n  Icon,\n  MiddleTruncate,\n  Mono,\n  NonIdealState,\n  Page,\n  PageHeader,\n  SplitPanelContainer,\n  Subheading,\n  Table,\n  Tag,\n  Tooltip,\n  colorAccentBlue,\n  colorAccentGray,\n  colorBackgroundDefault,\n  colorBackgroundLight,\n  colorLinkDefault,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link, useParams, useRouteMatch} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetLink} from '../assets/AssetLink';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {SidebarSection} from '../pipelines/SidebarComponents';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ResourceTabs} from './ResourceTabs';\nimport {\n  ResourceRootQuery,\n  ResourceRootQueryVariables,\n  ResourceDetailsFragment,\n} from './types/ResourceRoot.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nconst remapName = (inName: string): string => {\n  if (inName === 'StringSourceType') {\n    return 'String';\n  } else if (inName === 'IntSourceType') {\n    return 'Int';\n  } else if (inName === 'BoolSourceType') {\n    return 'Bool';\n  }\n  return inName;\n};\n\nexport const succinctType = (resourceType: string | undefined): string | null => {\n  return resourceType?.split('.').pop() || null;\n};\n\nconst resourceDisplayName = (\n  resource: undefined | {name: string; resourceType: string},\n): string | null => {\n  if (!resource) {\n    return null;\n  }\n  return resource.name.startsWith('_nested_')\n    ? succinctType(resource?.resourceType)\n    : resource.name;\n};\n\nconst SectionHeader = (props: {children: React.ReactNode}) => {\n  return (\n    <Box padding={{left: 24, vertical: 16}} background={colorBackgroundLight()} border=\"all\">\n      {props.children}\n    </Box>\n  );\n};\n\nexport const ResourceRoot = (props: Props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const {resourceName} = useParams<{resourceName: string}>();\n\n  useDocumentTitle(`Resource: ${resourceName}`);\n\n  const resourceSelector = {\n    ...repoAddressToSelector(repoAddress),\n    resourceName,\n  };\n  const queryResult = useQuery<ResourceRootQuery, ResourceRootQueryVariables>(RESOURCE_ROOT_QUERY, {\n    variables: {\n      resourceSelector,\n    },\n  });\n\n  const displayName =\n    (queryResult.data?.topLevelResourceDetailsOrError.__typename === 'ResourceDetails' &&\n      resourceDisplayName(queryResult.data?.topLevelResourceDetailsOrError)) ||\n    resourceName;\n\n  const numUses =\n    queryResult.data?.topLevelResourceDetailsOrError.__typename === 'ResourceDetails'\n      ? queryResult.data.topLevelResourceDetailsOrError.parentResources.length +\n        queryResult.data.topLevelResourceDetailsOrError.assetKeysUsing.length +\n        queryResult.data.topLevelResourceDetailsOrError.jobsOpsUsing.length +\n        queryResult.data.topLevelResourceDetailsOrError.schedulesUsing.length +\n        queryResult.data.topLevelResourceDetailsOrError.sensorsUsing.length\n      : 0;\n\n  const tab = useRouteMatch<{tab?: string}>(['/locations/:repoPath/resources/:name/:tab?'])?.params\n    .tab;\n\n  return (\n    <Page style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>{displayName}</Heading>}\n        tabs={\n          <ResourceTabs repoAddress={repoAddress} resourceName={resourceName} numUses={numUses} />\n        }\n      />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({topLevelResourceDetailsOrError}) => {\n          if (topLevelResourceDetailsOrError.__typename !== 'ResourceDetails') {\n            let message: string | null = null;\n            if (topLevelResourceDetailsOrError.__typename === 'PythonError') {\n              message = topLevelResourceDetailsOrError.message;\n            }\n\n            return (\n              <Alert\n                intent=\"warning\"\n                title={\n                  <Group direction=\"row\" spacing={4}>\n                    <div>Could not load resource.</div>\n                    {message && (\n                      <ButtonLink\n                        color={colorLinkDefault()}\n                        underline=\"always\"\n                        onClick={() => {\n                          showCustomAlert({\n                            title: 'Python error',\n                            body: message,\n                          });\n                        }}\n                      >\n                        View error\n                      </ButtonLink>\n                    )}\n                  </Group>\n                }\n              />\n            );\n          }\n\n          const resourceTypeSuccinct = succinctType(topLevelResourceDetailsOrError.resourceType);\n\n          return (\n            <div style={{height: '100%', display: 'flex'}}>\n              <SplitPanelContainer\n                identifier=\"resource-explorer\"\n                firstInitialPercent={50}\n                firstMinSize={400}\n                first={\n                  <Box padding={{bottom: 48}} style={{overflowY: 'auto'}}>\n                    {tab === 'uses' ? (\n                      <ResourceUses\n                        resourceDetails={topLevelResourceDetailsOrError}\n                        repoAddress={repoAddress}\n                        numUses={numUses}\n                      />\n                    ) : (\n                      <ResourceConfig\n                        resourceDetails={topLevelResourceDetailsOrError}\n                        repoAddress={repoAddress}\n                      />\n                    )}\n                  </Box>\n                }\n                second={\n                  <RightInfoPanel>\n                    <RightInfoPanelContent>\n                      <Box\n                        flex={{gap: 4, direction: 'column'}}\n                        margin={{left: 24, right: 12, vertical: 16}}\n                      >\n                        <Heading>{displayName}</Heading>\n\n                        <Tooltip content={topLevelResourceDetailsOrError.resourceType || ''}>\n                          <Mono>{resourceTypeSuccinct}</Mono>\n                        </Tooltip>\n                      </Box>\n\n                      <SidebarSection title=\"Definition\">\n                        <Box padding={{vertical: 16, horizontal: 24}}>\n                          <Tag icon=\"resource\">\n                            Resource in{' '}\n                            <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                          </Tag>\n                        </Box>\n                      </SidebarSection>\n                      {topLevelResourceDetailsOrError.description ? (\n                        <SidebarSection title=\"Description\">\n                          <Box padding={{vertical: 16, horizontal: 24}}>\n                            {topLevelResourceDetailsOrError.description}\n                          </Box>\n                        </SidebarSection>\n                      ) : null}\n                    </RightInfoPanelContent>\n                  </RightInfoPanel>\n                }\n              />\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst ResourceConfig = (props: {\n  resourceDetails: ResourceDetailsFragment;\n  repoAddress: RepoAddress;\n}) => {\n  const {resourceDetails, repoAddress} = props;\n\n  const configuredValues = Object.fromEntries(\n    resourceDetails.configuredValues.map((cv) => [cv.key, {value: cv.value, type: cv.type}]),\n  );\n  const nestedResources = resourceDetails.nestedResources;\n\n  return (\n    <>\n      {nestedResources.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Resource dependencies</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th style={{width: 120}}>Key</th>\n                <th style={{width: 180}}>Resource</th>\n              </tr>\n            </thead>\n            <tbody>\n              {nestedResources.map((resource) => {\n                const resourceEntry =\n                  resource.type === 'TOP_LEVEL' && resource.resource ? (\n                    <ResourceEntry\n                      key={resource.name}\n                      url={workspacePathFromAddress(repoAddress, `/resources/${resource.name}`)}\n                      name={resourceDisplayName(resource.resource) || ''}\n                      description={resource.resource.description || undefined}\n                    />\n                  ) : (\n                    <ResourceEntry key={resource.name} name={resource.name} />\n                  );\n\n                return (\n                  <tr key={resource.name}>\n                    <td>\n                      <strong>{resource.name}</strong>\n                    </td>\n                    <td colSpan={2}>{resourceEntry}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n      <Box>\n        <SectionHeader>\n          <Subheading>Configuration</Subheading>\n        </SectionHeader>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Key</th>\n              <th style={{width: 90}}>Type</th>\n              <th style={{width: 90}}>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {resourceDetails.configFields.length === 0 ? (\n              <tr>\n                <td colSpan={3}>\n                  <Box padding={{vertical: 8}}>\n                    <NonIdealState\n                      icon=\"settings\"\n                      title=\"No configuration\"\n                      description=\"This resource has no configuration fields.\"\n                    />\n                  </Box>\n                </td>\n              </tr>\n            ) : (\n              resourceDetails.configFields.map((field) => {\n                const defaultValue = field.defaultValueAsJson;\n                const type = configuredValues.hasOwnProperty(field.name)\n                  ? configuredValues[field.name]!.type\n                  : null;\n                const actualValue = configuredValues.hasOwnProperty(field.name)\n                  ? configuredValues[field.name]!.value\n                  : defaultValue;\n\n                const isDefault = type === 'VALUE' && defaultValue === actualValue;\n                return (\n                  <tr key={field.name}>\n                    <td>\n                      <Box flex={{direction: 'column', gap: 4, alignItems: 'flex-start'}}>\n                        <strong>{field.name}</strong>\n                        <div style={{fontSize: 12, color: colorTextLight()}}>\n                          {field.description}\n                        </div>\n                      </Box>\n                    </td>\n                    <td>{remapName(field.configTypeKey)}</td>\n                    <td>\n                      <Box flex={{direction: 'row', gap: 16}}>\n                        <Tooltip\n                          content={<>Default: {defaultValue}</>}\n                          canShow={!isDefault && !!defaultValue}\n                        >\n                          {type === 'ENV_VAR' ? <Tag>{actualValue}</Tag> : actualValue}\n                        </Tooltip>\n                        {isDefault && <Tag>Default</Tag>}\n                        {type === 'ENV_VAR' && <Tag intent=\"success\">Env var</Tag>}\n                      </Box>\n                    </td>\n                  </tr>\n                );\n              })\n            )}\n          </tbody>\n        </Table>\n      </Box>\n    </>\n  );\n};\n\nconst ResourceUses = (props: {\n  resourceDetails: ResourceDetailsFragment;\n  repoAddress: RepoAddress;\n  numUses: number;\n}) => {\n  const {resourceDetails, repoAddress, numUses} = props;\n\n  if (numUses === 0) {\n    return (\n      <Box padding={{vertical: 16}}>\n        <NonIdealState\n          icon=\"list\"\n          title=\"No uses\"\n          description=\"This resource is not used by any assets or resources.\"\n        />\n      </Box>\n    );\n  }\n\n  const parentResources = resourceDetails.parentResources;\n  return (\n    <>\n      {parentResources.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Parent resources</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th>Resource</th>\n              </tr>\n            </thead>\n            <tbody>\n              {parentResources.map((resource) => {\n                return (\n                  resource.resource && (\n                    <tr key={resource.name}>\n                      <td>\n                        <ResourceEntry\n                          url={workspacePathFromAddress(repoAddress, `/resources/${resource.name}`)}\n                          name={resourceDisplayName(resource.resource) || ''}\n                          description={resource.resource.description || undefined}\n                        />\n                      </td>\n                    </tr>\n                  )\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n      {resourceDetails.assetKeysUsing.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Assets</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th>Asset key</th>\n              </tr>\n            </thead>\n            <tbody>\n              {resourceDetails.assetKeysUsing.map((assetKey) => {\n                return (\n                  <tr key={assetKey.path.join('/')}>\n                    <td>\n                      <AssetLink key={assetKey.path.join('/')} path={assetKey.path} icon=\"asset\" />\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n      {resourceDetails.jobsOpsUsing.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Jobs</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th>Job name</th>\n                <th>Ops</th>\n              </tr>\n            </thead>\n            <tbody>\n              {resourceDetails.jobsOpsUsing.map((jobOps) => {\n                return (\n                  <tr key={jobOps.job.name}>\n                    <td>\n                      <Box\n                        flex={{\n                          direction: 'row',\n                          alignItems: 'center',\n                          display: 'inline-flex',\n                          gap: 8,\n                        }}\n                        style={{maxWidth: '100%'}}\n                      >\n                        <Icon name=\"job\" color={colorAccentGray()} />\n\n                        <Link\n                          to={workspacePathFromAddress(repoAddress, `/jobs/${jobOps.job.name}`)}\n                        >\n                          <MiddleTruncate text={jobOps.job.name} />\n                        </Link>\n                      </Box>\n                    </td>\n                    <td>\n                      <Box\n                        flex={{\n                          direction: 'row',\n                          alignItems: 'center',\n                          display: 'inline-flex',\n                          gap: 8,\n                        }}\n                        style={{maxWidth: '100%'}}\n                      >\n                        {jobOps.opsUsing.map((op) => (\n                          <Box\n                            flex={{\n                              direction: 'row',\n                              alignItems: 'center',\n                              display: 'inline-flex',\n                              gap: 8,\n                            }}\n                            style={{maxWidth: '100%'}}\n                            key={op.handleID}\n                          >\n                            <Icon name=\"op\" color={colorAccentGray()} />\n\n                            <Link\n                              to={workspacePathFromAddress(\n                                repoAddress,\n                                `/jobs/${jobOps.job.name}/${op.handleID.split('.').join('/')}`,\n                              )}\n                            >\n                              <MiddleTruncate text={op.solid.name} />\n                            </Link>\n                          </Box>\n                        ))}\n                      </Box>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n      {[\n        {\n          name: 'Schedules',\n          objects: resourceDetails.schedulesUsing,\n          icon: <Icon name=\"schedule\" color={colorAccentGray()} />,\n        },\n        {\n          name: 'Sensors',\n          objects: resourceDetails.sensorsUsing,\n          icon: <Icon name=\"sensors\" color={colorAccentGray()} />,\n        },\n      ]\n        .filter(({objects}) => objects.length > 0)\n        .map(({name, objects, icon}) => (\n          <div key={name}>\n            <SectionHeader>\n              <Subheading>{name}</Subheading>\n            </SectionHeader>\n            <Table>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                </tr>\n              </thead>\n              <tbody>\n                {objects.map((itemName) => {\n                  return (\n                    <tr key={name + ':' + itemName}>\n                      <td>\n                        <Box\n                          flex={{\n                            direction: 'row',\n                            alignItems: 'center',\n                            display: 'inline-flex',\n                            gap: 8,\n                          }}\n                          style={{maxWidth: '100%'}}\n                        >\n                          {icon}\n\n                          <Link\n                            to={workspacePathFromAddress(\n                              repoAddress,\n                              `/${name.toLowerCase()}/${itemName}`,\n                            )}\n                          >\n                            <MiddleTruncate text={itemName} />\n                          </Link>\n                        </Box>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </div>\n        ))}\n    </>\n  );\n};\n\nconst ResourceEntry = (props: {name: string; url?: string; description?: string}) => {\n  const {url, name, description} = props;\n\n  return (\n    <Box flex={{direction: 'column'}}>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}} style={{maxWidth: '100%'}}>\n        <Icon name=\"resource\" color={colorAccentBlue()} />\n        <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n          {url ? (\n            <Link to={url} style={{overflow: 'hidden'}}>\n              <MiddleTruncate text={name} />\n            </Link>\n          ) : (\n            <MiddleTruncate text={name} />\n          )}\n        </div>\n      </Box>\n      <CaptionMono>{description}</CaptionMono>\n    </Box>\n  );\n};\n\nconst RightInfoPanel = styled.div`\n  position: relative;\n\n  height: 100%;\n  min-height: 0;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  background: ${colorBackgroundDefault()};\n`;\n\nconst RightInfoPanelContent = styled.div`\n  flex: 1;\n  overflow-y: auto;\n`;\n\nconst RESOURCE_DETAILS_FRAGMENT = gql`\n  fragment ResourceDetailsFragment on ResourceDetails {\n    name\n    description\n    configFields {\n      name\n      description\n      configTypeKey\n      isRequired\n      defaultValueAsJson\n    }\n    configuredValues {\n      key\n      value\n      type\n    }\n    nestedResources {\n      name\n      type\n      resource {\n        name\n        resourceType\n        description\n      }\n    }\n    parentResources {\n      name\n      resource {\n        name\n        resourceType\n        description\n      }\n    }\n    assetKeysUsing {\n      path\n    }\n    schedulesUsing\n    sensorsUsing\n    jobsOpsUsing {\n      job {\n        id\n        name\n      }\n      opsUsing {\n        handleID\n        solid {\n          name\n        }\n      }\n    }\n    resourceType\n  }\n`;\nconst RESOURCE_ROOT_QUERY = gql`\n  query ResourceRootQuery($resourceSelector: ResourceSelector!) {\n    topLevelResourceDetailsOrError(resourceSelector: $resourceSelector) {\n      ...ResourceDetailsFragment\n      ...PythonErrorFragment\n    }\n  }\n  ${RESOURCE_DETAILS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Box,\n  Caption,\n  Icon,\n  MiddleTruncate,\n  Mono,\n  Tooltip,\n  colorAccentGray,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {succinctType} from './ResourceRoot';\nimport {ResourceEntryFragment} from './types/WorkspaceResourcesRoot.types';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 1fr';\n\ninterface ResourceRowProps extends ResourceEntryFragment {\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedResourceRow = (props: ResourceRowProps) => {\n  const {\n    name,\n    description,\n    repoAddress,\n    start,\n    height,\n    resourceType,\n    parentResources,\n    jobsOpsUsing,\n    assetKeysUsing,\n    schedulesUsing,\n    sensorsUsing,\n  } = props;\n  const resourceTypeSuccinct = succinctType(resourceType);\n  const uses =\n    parentResources.length +\n    jobsOpsUsing.length +\n    assetKeysUsing.length +\n    schedulesUsing.length +\n    sensorsUsing.length;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n              <Icon name=\"resource\" color={colorAccentGray()} />\n\n              <span style={{fontWeight: 500}}>\n                <Link to={workspacePathFromAddress(repoAddress, `/resources/${name}`)}>\n                  <MiddleTruncate text={name} />\n                </Link>\n              </span>\n            </Box>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: colorTextLight(),\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <Tooltip content={resourceType}>\n            <Mono>{resourceTypeSuccinct}</Mono>\n          </Tooltip>\n        </RowCell>\n        <RowCell>\n          <Link to={workspacePathFromAddress(repoAddress, `/resources/${name}/uses`)}>{uses}</Link>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedResourceHeader = () => {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: colorTextLight(),\n      }}\n    >\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Uses</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {RepoAddress} from '../workspace/types';\n\nimport {VirtualizedResourceHeader, VirtualizedResourceRow} from './VirtualizedResourceRow';\nimport {ResourceEntryFragment} from './types/WorkspaceResourcesRoot.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n}\n\nexport const VirtualizedResourceTable = ({repoAddress, resources}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: resources.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: ResourceEntryFragment = resources[index]!;\n              return (\n                <VirtualizedResourceRow\n                  key={key}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                  {...row}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, NonIdealState, Spinner, TextInput, colorTextLight} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {WorkspaceHeader} from '../workspace/WorkspaceHeader';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {VirtualizedResourceTable} from './VirtualizedResourceTable';\nimport {\n  WorkspaceResourcesQuery,\n  WorkspaceResourcesQueryVariables,\n} from './types/WorkspaceResourcesRoot.types';\n\nexport const WorkspaceResourcesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Resources: ${repoName}`);\n\n  const [searchValue, setSearchValue] = React.useState('');\n\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceResourcesQuery, WorkspaceResourcesQueryVariables>(\n    WORKSPACE_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const resources = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.allTopLevelResourceDetails;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [resources, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                <div>\n                  No resources matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={`No resources were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedResourceTable repoAddress={repoAddress} resources={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"resources\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nexport const RESOURCE_ENTRY_FRAGMENT = gql`\n  fragment ResourceEntryFragment on ResourceDetails {\n    name\n    description\n    resourceType\n    parentResources {\n      name\n    }\n    assetKeysUsing {\n      path\n    }\n    jobsOpsUsing {\n      job {\n        id\n      }\n    }\n    schedulesUsing\n    sensorsUsing\n  }\n`;\n\nconst WORKSPACE_RESOURCES_QUERY = gql`\n  query WorkspaceResourcesQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        allTopLevelResourceDetails {\n          id\n          ...ResourceEntryFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {\n  Box,\n  Icon,\n  IconWrapper,\n  colorAccentGray,\n  colorBackgroundLight,\n  colorBackgroundLightHover,\n  colorKeylineDefault,\n  colorTextLight,\n  colorTextLighter,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {DUNDER_REPO_NAME} from '../workspace/buildRepoAddress';\n\nexport const SECTION_HEADER_HEIGHT = 32;\n\ninterface Props {\n  expanded: boolean;\n  onClick: (e: React.MouseEvent) => void;\n  repoName: string;\n  repoLocation: string;\n  showLocation: boolean;\n  rightElement?: React.ReactNode;\n}\n\nexport const RepoSectionHeader = (props: Props) => {\n  const {expanded, onClick, repoName, repoLocation, showLocation, rightElement} = props;\n  const isDunderRepoName = repoName === DUNDER_REPO_NAME;\n  return (\n    <SectionHeaderButton $open={expanded} onClick={onClick}>\n      <Box\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n        padding={{horizontal: 24}}\n      >\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          <Icon name=\"folder\" color={colorAccentGray()} />\n          <div>\n            <RepoName>{isDunderRepoName ? repoLocation : repoName}</RepoName>\n            {showLocation && !isDunderRepoName ? (\n              <RepoLocation>{`@${repoLocation}`}</RepoLocation>\n            ) : null}\n          </div>\n        </Box>\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          {rightElement}\n          <Box margin={{top: 2}}>\n            <Icon name=\"arrow_drop_down\" />\n          </Box>\n        </Box>\n      </Box>\n    </SectionHeaderButton>\n  );\n};\n\nconst SectionHeaderButton = styled.button<{$open: boolean}>`\n  background-color: ${colorBackgroundLight()};\n  border: 0;\n  box-shadow:\n    inset 0px -1px 0 ${colorKeylineDefault()},\n    inset 0px 1px 0 ${colorKeylineDefault()};\n  color: ${colorTextLight()};\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  width: 100%;\n  margin: 0;\n  height: ${SECTION_HEADER_HEIGHT}px;\n  text-align: left;\n\n  :focus,\n  :active {\n    outline: none;\n  }\n\n  :hover {\n    background-color: ${colorBackgroundLightHover()};\n  }\n\n  ${IconWrapper}[aria-label=\"arrow_drop_down\"] {\n    transition: transform 100ms linear;\n    ${({$open}) => ($open ? null : `transform: rotate(-90deg);`)}\n  }\n`;\n\nconst RepoName = styled.span`\n  font-weight: 600;\n`;\n\nconst RepoLocation = styled.span`\n  font-weight: 400;\n  color: ${colorTextLighter()};\n`;\n","import * as React from 'react';\n\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\n\n/**\n * Return a date/time formatter function that takes the user's stored timezone into\n * account. Useful for rendering arbitrary non-typical date/time formats.\n *\n * @returns string\n */\nexport const useFormatDateTime = () => {\n  const {\n    timezone: [storedTimezone],\n    hourCycle: [storedHourCycle],\n  } = React.useContext(TimeContext);\n\n  const timeZone = storedTimezone === 'Automatic' ? browserTimezone() : storedTimezone;\n  const hourCycle = storedHourCycle === 'Automatic' ? undefined : storedHourCycle;\n\n  return React.useCallback(\n    (date: Date, options: Intl.DateTimeFormatOptions, language = navigator.language) => {\n      return Intl.DateTimeFormat(language, {timeZone, hourCycle, ...options}).format(date);\n    },\n    [timeZone, hourCycle],\n  );\n};\n","import {\n  colorAccentBlue,\n  colorAccentGreen,\n  colorAccentRed,\n  colorBackgroundDisabled,\n} from '@dagster-io/ui-components';\n\nimport {queuedStatuses, inProgressStatuses, failedStatuses, successStatuses} from './RunStatuses';\nimport {TimelineRun} from './RunTimeline';\n\ntype BackgroundStatus = 'inProgress' | 'queued' | 'failed' | 'succeeded' | 'scheduled';\n\nconst statusToColor = (status: BackgroundStatus) => {\n  switch (status) {\n    case 'queued':\n      return colorBackgroundDisabled();\n    case 'scheduled':\n      return colorBackgroundDisabled();\n    case 'inProgress':\n      return colorAccentBlue();\n    case 'failed':\n      return colorAccentRed();\n    case 'succeeded':\n      return colorAccentGreen();\n  }\n};\n\nexport const mergeStatusToBackground = (runs: TimelineRun[]) => {\n  const counts = {\n    scheduled: 0,\n    queued: 0,\n    inProgress: 0,\n    failed: 0,\n    succeeded: 0,\n  };\n\n  runs.forEach(({status}) => {\n    if (status === 'SCHEDULED') {\n      counts.scheduled++;\n    } else if (queuedStatuses.has(status)) {\n      counts.queued++;\n    } else if (inProgressStatuses.has(status)) {\n      counts.inProgress++;\n    } else if (failedStatuses.has(status)) {\n      counts.failed++;\n    } else if (successStatuses.has(status)) {\n      counts.succeeded++;\n    }\n  });\n\n  const statusArr = Object.keys(counts).filter(\n    (status) => counts[status as keyof typeof counts] > 0,\n  ) as BackgroundStatus[];\n\n  if (statusArr.length === 1) {\n    const [element] = statusArr;\n    return statusToColor(element!);\n  }\n\n  // const colorList = statusArr.map(statusToColor);\n  const runCount = runs.length;\n\n  const colors = [\n    counts.failed > 0 ? {status: 'failed', pct: (counts.failed * 100) / runCount} : null,\n    counts.succeeded > 0 ? {status: 'succeeded', pct: (counts.succeeded * 100) / runCount} : null,\n    counts.inProgress > 0\n      ? {status: 'inProgress', pct: (counts.inProgress * 100) / runCount}\n      : null,\n    counts.queued > 0 ? {status: 'queued', pct: (counts.queued * 100) / runCount} : null,\n    counts.scheduled > 0 ? {status: 'scheduled', pct: (counts.scheduled * 100) / runCount} : null,\n  ].filter(Boolean);\n\n  let colorString = '';\n  let nextPct = 0;\n  let pctSoFar = 0;\n\n  for (let ii = 0; ii < colors.length; ii++) {\n    const value = colors[ii];\n    if (!value) {\n      continue;\n    }\n\n    const {status, pct} = value;\n    pctSoFar = nextPct;\n    nextPct += pct;\n    const colorForStatus = statusToColor(status as BackgroundStatus);\n    if (ii === 0) {\n      colorString += `${colorForStatus} ${pct.toFixed(1)}%, `;\n    } else if (ii === colors.length - 1) {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}%`;\n    } else {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}% ${nextPct.toFixed(1)}%, `;\n    }\n  }\n\n  return `linear-gradient(to right, ${colorString})`;\n};\n","import {\n  Box,\n  Popover,\n  Mono,\n  FontFamily,\n  Tooltip,\n  Tag,\n  Icon,\n  Spinner,\n  MiddleTruncate,\n  useViewport,\n  colorKeylineDefault,\n  colorTextLighter,\n  colorAccentReversed,\n  colorTextDefault,\n  colorBackgroundDefault,\n  colorBackgroundDefaultHover,\n  colorAccentPrimary,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatus} from '../graphql/types';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useFormatDateTime} from '../ui/useFormatDateTime';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsURLString} from '../workspace/repoAddressAsString';\nimport {repoAddressFromPath} from '../workspace/repoAddressFromPath';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SECTION_HEADER_HEIGHT} from './RepoSectionHeader';\nimport {RunStatusDot} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses, successStatuses} from './RunStatuses';\nimport {TimeElapsed} from './TimeElapsed';\nimport {batchRunsForTimeline, RunBatch} from './batchRunsForTimeline';\nimport {mergeStatusToBackground} from './mergeStatusToBackground';\n\nconst ROW_HEIGHT = 32;\nconst TIME_HEADER_HEIGHT = 32;\nconst DATE_TIME_HEIGHT = TIME_HEADER_HEIGHT * 2;\nconst EMPTY_STATE_HEIGHT = 110;\nconst LEFT_SIDE_SPACE_ALLOTTED = 320;\nconst LABEL_WIDTH = 268;\nconst MIN_DATE_WIDTH_PCT = 10;\n\nconst ONE_HOUR_MSEC = 60 * 60 * 1000;\n\nexport type TimelineRun = {\n  id: string;\n  status: RunStatus | 'SCHEDULED';\n  startTime: number;\n  endTime: number;\n};\n\nexport type TimelineJob = {\n  key: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  jobType: 'job' | 'asset';\n  path: string;\n  runs: TimelineRun[];\n};\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; job: TimelineJob};\n\ninterface Props {\n  loading?: boolean;\n  jobs: TimelineJob[];\n  range: [number, number];\n}\n\nexport const RunTimeline = (props: Props) => {\n  const {loading = false, jobs, range} = props;\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const {\n    viewport: {width},\n    containerProps: {ref: measureRef},\n  } = useViewport();\n\n  const now = Date.now();\n  const [_, end] = range;\n  const includesTicks = now <= end;\n\n  const buckets = jobs.reduce(\n    (accum, job) => {\n      const {repoAddress} = job;\n      const repoKey = repoAddressAsURLString(repoAddress);\n      const jobsForRepo = accum[repoKey] || [];\n      return {...accum, [repoKey]: [...jobsForRepo, job]};\n    },\n    {} as Record<string, TimelineJob[]>,\n  );\n\n  const allKeys = Object.keys(buckets);\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    Object.entries(buckets).forEach(([repoKey, bucket]) => {\n      const repoAddress = repoAddressFromPath(repoKey);\n      if (!repoAddress) {\n        return;\n      }\n\n      flat.push({type: 'header', repoAddress, jobCount: bucket.length});\n      if (expandedKeys.includes(repoKey)) {\n        bucket.forEach((job) => {\n          flat.push({type: 'job', repoAddress, job});\n        });\n      }\n    });\n\n    return flat;\n  }, [buckets, expandedKeys]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (_: number) => 32,\n    overscan: 40,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  if (!width) {\n    return <div style={{height: DATE_TIME_HEIGHT + EMPTY_STATE_HEIGHT}} ref={measureRef} />;\n  }\n\n  const repoOrder = Object.keys(buckets).sort((a, b) => a.localeCompare(b));\n\n  const expandedRepos = repoOrder.filter((repoKey) => expandedKeys.includes(repoKey));\n  const expandedJobCount = expandedRepos.reduce(\n    (accum, repoKey) => accum + buckets[repoKey]!.length,\n    0,\n  );\n  const height = repoOrder.length * SECTION_HEADER_HEIGHT + ROW_HEIGHT * expandedJobCount;\n  const duplicateRepoNames = findDuplicateRepoNames(\n    repoOrder.map((repoKey) => repoAddressFromPath(repoKey)?.name || ''),\n  );\n  const anyJobs = repoOrder.length > 0;\n\n  return (\n    <>\n      <div ref={measureRef} />\n      <Box\n        padding={{left: 24}}\n        flex={{direction: 'column', justifyContent: 'center'}}\n        style={{fontSize: '16px', flex: `0 0 ${DATE_TIME_HEIGHT}px`}}\n        border=\"top-and-bottom\"\n      >\n        Jobs\n      </Box>\n      <div style={{position: 'relative'}}>\n        <TimeDividers interval={ONE_HOUR_MSEC} range={range} height={anyJobs ? height : 0} />\n      </div>\n      {repoOrder.length ? (\n        <div style={{overflow: 'hidden', position: 'relative'}}>\n          <Container ref={parentRef}>\n            <Inner $totalHeight={totalHeight}>\n              {items.map(({index, key, size, start}) => {\n                const row: RowType = flattened[index]!;\n                const type = row!.type;\n                if (type === 'header') {\n                  const repoKey = repoAddressAsURLString(row.repoAddress);\n                  const repoName = row.repoAddress.name;\n                  return (\n                    <TimelineHeaderRow\n                      expanded={expandedKeys.includes(repoKey)}\n                      key={repoKey}\n                      height={size}\n                      top={start}\n                      repoAddress={row.repoAddress}\n                      isDuplicateRepoName={!!(repoName && duplicateRepoNames.has(repoName))}\n                      jobs={buckets[repoKey]!}\n                      onToggle={onToggle}\n                      onToggleAll={onToggleAll}\n                    />\n                  );\n                }\n\n                return (\n                  <RunTimelineRow\n                    job={row.job}\n                    key={key}\n                    height={size}\n                    top={start}\n                    range={range}\n                    width={width}\n                  />\n                );\n              })}\n            </Inner>\n          </Container>\n        </div>\n      ) : (\n        <RunsEmptyOrLoading loading={loading} includesTicks={includesTicks} />\n      )}\n    </>\n  );\n};\n\ninterface TimelineHeaderRowProps {\n  expanded: boolean;\n  repoAddress: RepoAddress;\n  isDuplicateRepoName: boolean;\n  jobs: TimelineJob[];\n  height: number;\n  top: number;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}\n\nconst TimelineHeaderRow = (props: TimelineHeaderRowProps) => {\n  const {expanded, onToggle, onToggleAll, repoAddress, isDuplicateRepoName, jobs, height, top} =\n    props;\n\n  return (\n    <RepoRow\n      expanded={expanded}\n      height={height}\n      start={top}\n      repoAddress={repoAddress}\n      showLocation={isDuplicateRepoName}\n      onToggle={onToggle}\n      onToggleAll={onToggleAll}\n      rightElement={<RunStatusTags jobs={jobs} />}\n    />\n  );\n};\n\nconst RunStatusTags = React.memo(({jobs}: {jobs: TimelineJob[]}) => {\n  const counts = React.useMemo(() => {\n    let inProgressCount = 0;\n    let failedCount = 0;\n    let succeededCount = 0;\n    jobs.forEach(({runs}) => {\n      runs.forEach(({status}) => {\n        // Refine `SCHEDULED` out so that our Set checks below pass TypeScript.\n        if (status === 'SCHEDULED') {\n          return;\n        }\n        if (inProgressStatuses.has(status)) {\n          inProgressCount++;\n        } else if (failedStatuses.has(status)) {\n          failedCount++;\n        } else if (successStatuses.has(status)) {\n          succeededCount++;\n        }\n      });\n    });\n    return {inProgressCount, failedCount, succeededCount};\n  }, [jobs]);\n\n  return <RunStatusTagsWithCounts {...counts} />;\n});\n\nexport const RunStatusTagsWithCounts = ({\n  inProgressCount,\n  succeededCount,\n  failedCount,\n}: {\n  inProgressCount: number;\n  succeededCount: number;\n  failedCount: number;\n}) => {\n  const inProgressText =\n    inProgressCount === 1 ? '1 run in progress' : `${inProgressCount} runs in progress`;\n  const succeededText =\n    succeededCount === 1 ? '1 run succeeded' : `${succeededCount} runs succeeded`;\n  const failedText = failedCount === 1 ? '1 run failed' : `${failedCount} runs failed`;\n\n  return (\n    <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n      {inProgressCount > 0 ? (\n        <Tooltip content={<StatusSpan>{inProgressText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"primary\">{inProgressCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {succeededCount > 0 ? (\n        <Tooltip content={<StatusSpan>{succeededText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"success\">{succeededCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {failedCount > 0 ? (\n        <Tooltip content={<StatusSpan>{failedText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"danger\">{failedCount}</Tag>\n        </Tooltip>\n      ) : null}\n    </Box>\n  );\n};\n\nconst StatusSpan = styled.span`\n  white-space: nowrap;\n`;\n\ntype DateMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n  width: number;\n};\n\ntype TimeMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n};\n\ninterface TimeDividersProps {\n  height: number;\n  interval: number;\n  range: [number, number];\n}\n\nconst dateTimeOptions: Intl.DateTimeFormatOptions = {\n  month: 'numeric',\n  day: 'numeric',\n  year: 'numeric',\n};\n\nconst dateTimeOptionsWithTimezone: Intl.DateTimeFormatOptions = {\n  month: 'short',\n  day: 'numeric',\n  year: 'numeric',\n  timeZoneName: 'short',\n};\n\nconst timeOnlyOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n};\n\nconst TimeDividers = (props: TimeDividersProps) => {\n  const {interval, range, height} = props;\n  const [start, end] = range;\n  const formatDateTime = useFormatDateTime();\n\n  const dateMarkers: DateMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startDate = new Date(start);\n    const startDateStringWithTimezone = formatDateTime(\n      startDate,\n      dateTimeOptionsWithTimezone,\n      'en-US',\n    );\n\n    const dayBoundaries = [];\n\n    // Create a date at midnight on this date in this timezone.\n    let cursor = new Date(startDateStringWithTimezone);\n\n    while (cursor.valueOf() < end) {\n      const dayStart = cursor.getTime();\n      const dayEnd = new Date(dayStart).setDate(cursor.getDate() + 1); // Increment by one day.\n      cursor = new Date(dayEnd);\n      dayBoundaries.push({dayStart, dayEnd});\n    }\n\n    return dayBoundaries.map(({dayStart, dayEnd}) => {\n      const date = new Date(dayStart);\n      const startLeftMsec = dayStart - start;\n      const dayLength = dayEnd - dayStart; // This can vary with DST\n      const endRight = startLeftMsec + dayLength;\n\n      const left = Math.max(0, (startLeftMsec / totalTime) * 100);\n      const right = Math.min(100, (endRight / totalTime) * 100);\n\n      return {\n        label: formatDateTime(date, dateTimeOptions),\n        key: date.toString(),\n        left,\n        width: right - left,\n      };\n    });\n  }, [end, formatDateTime, start]);\n\n  const timeMarkers: TimeMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startGap = start % interval;\n    const firstMarker = start - startGap;\n    const markerCount = Math.ceil(totalTime / interval) + 1;\n    return [...new Array(markerCount)]\n      .map((_, ii) => {\n        const time = firstMarker + ii * interval;\n        const date = new Date(time);\n        const label = formatDateTime(date, timeOnlyOptions).replace(' ', '');\n        return {\n          label,\n          key: date.toString(),\n          left: ((time - start) / totalTime) * 100,\n        };\n      })\n      .filter((marker) => marker.left > 0);\n  }, [end, start, interval, formatDateTime]);\n\n  const now = Date.now();\n  const nowLeft = `${(((now - start) / (end - start)) * 100).toPrecision(3)}%`;\n\n  return (\n    <DividerContainer style={{height: `${height}px`, top: `-${DATE_TIME_HEIGHT}px`}}>\n      <DividerLabels>\n        {dateMarkers.map((marker) => (\n          <DateLabel\n            key={marker.key}\n            style={{\n              left: `${marker.left.toPrecision(3)}%`,\n              width: `${marker.width.toPrecision(3)}%`,\n            }}\n          >\n            {marker.width > MIN_DATE_WIDTH_PCT ? (\n              <Box flex={{justifyContent: 'center'}}>{marker.label}</Box>\n            ) : null}\n          </DateLabel>\n        ))}\n      </DividerLabels>\n      <DividerLabels>\n        {timeMarkers.map((marker) => (\n          <TimeLabel key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}}>\n            {marker.label}\n          </TimeLabel>\n        ))}\n      </DividerLabels>\n      <DividerLines>\n        <DividerLine style={{left: 0, backgroundColor: colorKeylineDefault()}} />\n        {timeMarkers.map((marker) => (\n          <DividerLine key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}} />\n        ))}\n        {now >= start && now <= end ? (\n          <>\n            <NowMarker style={{left: nowLeft}}>Now</NowMarker>\n            <DividerLine\n              style={{left: nowLeft, backgroundColor: colorAccentPrimary(), zIndex: 1}}\n            />\n          </>\n        ) : null}\n      </DividerLines>\n    </DividerContainer>\n  );\n};\n\nconst DividerContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n  right: 0;\n  font-family: ${FontFamily.monospace};\n  color: ${colorTextLighter()};\n`;\n\nconst DividerLabels = styled.div`\n  display: flex;\n  align-items: center;\n  box-shadow:\n    inset 1px 0 0 ${colorKeylineDefault()},\n    inset 0 1px 0 ${colorKeylineDefault()},\n    inset -1px 0 0 ${colorKeylineDefault()};\n  height: ${TIME_HEADER_HEIGHT}px;\n  position: relative;\n  user-select: none;\n  font-size: 12px;\n  width: 100%;\n  overflow: hidden;\n\n  :first-child {\n    box-shadow:\n      inset 1px 0 0 ${colorKeylineDefault()},\n      inset -1px 0 0 ${colorKeylineDefault()};\n  }\n`;\n\nconst DateLabel = styled.div`\n  position: absolute;\n  padding: 8px 0;\n  white-space: nowrap;\n\n  :not(:first-child) {\n    box-shadow: inset 1px 0 0 ${colorKeylineDefault()};\n  }\n`;\n\nconst TimeLabel = styled.div`\n  position: absolute;\n  padding: 8px;\n  box-shadow: inset 1px 0 0 ${colorKeylineDefault()};\n  white-space: nowrap;\n`;\n\nconst DividerLines = styled.div`\n  height: 100%;\n  position: relative;\n  width: 100%;\n  box-shadow:\n    inset 1px 0 0 ${colorKeylineDefault()},\n    inset -1px 0 0 ${colorKeylineDefault()};\n`;\n\nconst DividerLine = styled.div`\n  background-color: ${colorKeylineDefault()};\n  height: 100%;\n  position: absolute;\n  top: 0;\n  width: 1px;\n`;\n\nconst NowMarker = styled.div`\n  background-color: ${colorAccentPrimary()};\n  border-radius: 1px;\n  color: ${colorAccentReversed()};\n  cursor: default;\n  font-size: 12px;\n  line-height: 12px;\n  margin-left: -12px;\n  padding: 1px 4px;\n  position: absolute;\n  top: -14px;\n  user-select: none;\n`;\n\nconst MIN_CHUNK_WIDTH = 4;\nconst MIN_WIDTH_FOR_MULTIPLE = 12;\n\nconst RunTimelineRow = ({\n  job,\n  top,\n  height,\n  range,\n  width: containerWidth,\n}: {\n  job: TimelineJob;\n  top: number;\n  height: number;\n  range: [number, number];\n  width: number;\n}) => {\n  const [start, end] = range;\n  const width = containerWidth - LEFT_SIDE_SPACE_ALLOTTED;\n  const {runs} = job;\n\n  // Batch overlapping runs in this row.\n  const batched = React.useMemo(() => {\n    const batches: RunBatch<TimelineRun>[] = batchRunsForTimeline({\n      runs,\n      start,\n      end,\n      width,\n      minChunkWidth: MIN_CHUNK_WIDTH,\n      minMultipleWidth: MIN_WIDTH_FOR_MULTIPLE,\n    });\n\n    return batches;\n  }, [runs, start, end, width]);\n\n  if (!job.runs.length) {\n    return null;\n  }\n\n  return (\n    <Row $height={height} $start={top}>\n      <JobName>\n        <Icon name={job.jobType === 'asset' ? 'asset' : 'job'} />\n        <div style={{width: LABEL_WIDTH}}>\n          {job.jobType === 'asset' ? (\n            <span style={{color: colorTextDefault()}}>\n              <MiddleTruncate text={job.jobName} />\n            </span>\n          ) : (\n            <Link to={job.path}>\n              <MiddleTruncate text={job.jobName} />\n            </Link>\n          )}\n        </div>\n      </JobName>\n      <RunChunks>\n        {batched.map((batch) => {\n          const {left, width, runs} = batch;\n          const runCount = runs.length;\n          return (\n            <RunChunk\n              key={batch.runs[0]!.id}\n              $background={mergeStatusToBackground(batch.runs)}\n              $multiple={runCount > 1}\n              style={{\n                left: `${left}px`,\n                width: `${width}px`,\n              }}\n            >\n              <Popover\n                content={<RunHoverContent job={job} batch={batch} />}\n                position=\"top\"\n                interactionKind=\"hover\"\n                className=\"chunk-popover-target\"\n              >\n                <Box\n                  flex={{direction: 'row', justifyContent: 'center', alignItems: 'center'}}\n                  style={{height: '100%'}}\n                >\n                  {runCount > 1 ? <BatchCount>{batch.runs.length}</BatchCount> : null}\n                </Box>\n              </Popover>\n            </RunChunk>\n          );\n        })}\n      </RunChunks>\n    </Row>\n  );\n};\n\nconst RunsEmptyOrLoading = (props: {loading: boolean; includesTicks: boolean}) => {\n  const {loading, includesTicks} = props;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          {includesTicks ? 'Loading runs and scheduled ticks' : 'Loading runs'}\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12, alignItems: 'center'}}>\n        <div>\n          {includesTicks\n            ? 'No runs or scheduled ticks in this time period.'\n            : 'No runs in this time period.'}\n        </div>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <AnchorButton icon={<Icon name=\"add_circle\" />} to=\"/overview/jobs\">\n            Launch a run\n          </AnchorButton>\n          <span>or</span>\n          <AnchorButton icon={<Icon name=\"materialization\" />} to=\"/asset-groups\">\n            Materialize an asset\n          </AnchorButton>\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      background={colorBackgroundDefault()}\n      padding={{vertical: 24}}\n      flex={{direction: 'row', justifyContent: 'center'}}\n      border=\"top-and-bottom\"\n    >\n      {content()}\n    </Box>\n  );\n};\n\ntype RowProps = {$height: number; $start: number};\n\nconst Row = styled.div.attrs<RowProps>(({$height, $start}) => ({\n  style: {\n    height: `${$height}px`,\n    transform: `translateY(${$start}px)`,\n  },\n}))<RowProps>`\n  align-items: center;\n  box-shadow: inset 0 -1px 0 ${colorKeylineDefault()};\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  padding: 1px 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  overflow: hidden;\n  transition: background-color 100ms linear;\n\n  :hover {\n    background-color: ${colorBackgroundDefaultHover()};\n  }\n`;\n\nconst JobName = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: flex-start;\n  gap: 8px;\n  line-height: 16px;\n  overflow: hidden;\n  padding: 0 12px 0 24px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n`;\n\nconst RunChunks = styled.div`\n  flex: 1;\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n`;\n\ninterface ChunkProps {\n  $background: string;\n  $multiple: boolean;\n}\n\nconst RunChunk = styled.div<ChunkProps>`\n  align-items: center;\n  background: ${({$background}) => $background};\n  border-radius: 1px;\n  height: ${ROW_HEIGHT - 8}px;\n  position: absolute;\n  top: 4px;\n  ${({$multiple}) => ($multiple ? `min-width: ${MIN_WIDTH_FOR_MULTIPLE}px` : null)};\n\n  transition:\n    background 200ms linear,\n    opacity 200ms linear,\n    width 200ms ease-in-out;\n\n  :hover {\n    opacity: 0.7;\n  }\n  .chunk-popover-target {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst BatchCount = styled.div`\n  color: ${colorAccentReversed()};\n  cursor: default;\n  font-family: ${FontFamily.monospace};\n  font-size: 14px;\n  font-weight: 600;\n  user-select: none;\n`;\n\ninterface RunHoverContentProps {\n  job: TimelineJob;\n  batch: RunBatch<TimelineRun>;\n}\n\nconst RunHoverContent = (props: RunHoverContentProps) => {\n  const {job, batch} = props;\n  const sliced = batch.runs.slice(0, 50);\n  const remaining = batch.runs.length - sliced.length;\n\n  return (\n    <Box style={{width: '260px'}}>\n      <Box padding={12} border=\"bottom\">\n        <HoverContentJobName>{job.jobName}</HoverContentJobName>\n      </Box>\n      <div style={{maxHeight: '240px', overflowY: 'auto'}}>\n        {sliced.map((run, ii) => (\n          <Box\n            key={run.id}\n            border={ii > 0 ? 'top' : null}\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            padding={{vertical: 8, horizontal: 12}}\n          >\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <RunStatusDot status={run.status} size={8} />\n              {run.status === 'SCHEDULED' ? (\n                'Scheduled'\n              ) : (\n                <Link to={`/runs/${run.id}`}>\n                  <Mono>{run.id.slice(0, 8)}</Mono>\n                </Link>\n              )}\n            </Box>\n            <Mono>\n              {run.status === 'SCHEDULED' ? (\n                <TimestampDisplay timestamp={run.startTime / 1000} />\n              ) : (\n                <TimeElapsed startUnix={run.startTime / 1000} endUnix={run.endTime / 1000} />\n              )}\n            </Mono>\n          </Box>\n        ))}\n      </div>\n      {remaining > 0 ? (\n        <Box padding={12} border=\"top\">\n          <Link to={`${job.path}/runs`}>+ {remaining} more</Link>\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst HoverContentJobName = styled.strong`\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n`;\n","export interface RunWithTime {\n  startTime: number;\n  endTime: number;\n}\n\nexport type RunBatch<R extends RunWithTime> = {\n  runs: R[];\n  startTime: number;\n  endTime: number;\n  left: number;\n  width: number;\n};\n\ntype Config<R extends RunWithTime> = {\n  runs: R[];\n  start: number;\n  end: number;\n  width: number;\n  minChunkWidth: number;\n  minMultipleWidth: number;\n};\n\nexport const overlap = (a: {start: number; end: number}, b: {start: number; end: number}) =>\n  !(a.end < b.start || b.end < a.start);\n\n/**\n * Given a list of runs, batch any that overlap. Calculate `left` and `width` values for rendering\n * purposes, using minimum widths for very brief runs and overlapping batches.\n */\nexport const batchRunsForTimeline = <R extends RunWithTime>(config: Config<R>) => {\n  const {runs, start, end, width, minChunkWidth, minMultipleWidth} = config;\n  const rangeLength = end - start;\n\n  const now = Date.now();\n  const nowLeft = ((now - start) / (end - start)) * width;\n\n  const batches: RunBatch<R>[] = runs\n    .map((run) => {\n      const startTime = run.startTime;\n      const endTime = run.endTime || Date.now();\n      const left = Math.max(0, Math.floor(((startTime - start) / rangeLength) * width));\n      const runWidth = Math.max(\n        minChunkWidth,\n        Math.min(\n          Math.ceil(((endTime - startTime) / rangeLength) * width),\n          Math.ceil(((endTime - start) / rangeLength) * width),\n        ),\n      );\n\n      return {\n        runs: [run],\n        startTime,\n        endTime,\n        left,\n        width: runWidth,\n      };\n    })\n    .sort((a, b) => b.left - a.left);\n\n  const consolidated = [];\n\n  while (batches.length) {\n    const current = batches.shift();\n    const next = batches[0];\n    if (current) {\n      if (next && canBatch(current, next, minMultipleWidth, nowLeft)) {\n        // Remove `next`, consolidate it with `current`, and unshift it back on.\n        // This way, we keep looking for batches to consolidate with.\n        batches.shift();\n        current.runs = [...current.runs, ...next.runs];\n        current.startTime = Math.min(current.startTime, next.startTime);\n        current.endTime = Math.max(current.endTime, next.endTime);\n\n        // Identify the rightmost point for these two items.\n        const right = Math.max(\n          current.left + minMultipleWidth,\n          current.left + current.width,\n          next.left + next.width,\n        );\n\n        // Using the leftmost point, calculate the new width using the rightmost point\n        // determined above.\n        const minLeft = Math.min(current.left, next.left);\n        current.width = right - minLeft;\n        current.left = minLeft;\n\n        batches.unshift(current);\n      } else {\n        // If the next batch doesn't overlap, we've consolidated this batch\n        // all we can. Move on!\n        consolidated.push(current);\n      }\n    }\n  }\n\n  return consolidated;\n};\n\nconst canBatch = (\n  current: RunBatch<RunWithTime>,\n  next: RunBatch<RunWithTime>,\n  minMultipleWidth: number,\n  nowLeft: number,\n) => {\n  const currentStart = current.left;\n  const currentEnd = current.left + Math.max(current.width, minMultipleWidth);\n  const nextStart = next.left;\n  const nextEnd = next.left + Math.max(next.width, minMultipleWidth);\n\n  const minStart = Math.min(current.left, next.left);\n  const maxEnd = Math.max(\n    current.left + Math.max(current.width, minMultipleWidth),\n    next.left + Math.max(next.width, minMultipleWidth),\n  );\n\n  // If the batches overlap with each other but do NOT visually overlap with the \"now\"\n  // time marker, they can be batched.\n  return (\n    overlap({start: currentStart, end: currentEnd}, {start: nextStart, end: nextEnd}) &&\n    // ...and they do not combine to cross over the \"now\" marker\n    (minStart > nowLeft || maxEnd < nowLeft)\n  );\n};\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  colorAccentGreen,\n  colorAccentYellow,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nimport {START_SCHEDULE_MUTATION, STOP_SCHEDULE_MUTATION} from './ScheduleMutations';\nimport {\n  StartThisScheduleMutation,\n  StartThisScheduleMutationVariables,\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from './types/ScheduleMutations.types';\n\nexport type ScheduleInfo = {\n  repoAddress: RepoAddress;\n  scheduleName: string;\n  scheduleState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  schedules: ScheduleInfo[];\n}\n\nexport const ScheduleStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, schedules} = props;\n  const count = schedules.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  React.useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSchedule] = useMutation<\n    StartThisScheduleMutation,\n    StartThisScheduleMutationVariables\n  >(START_SCHEDULE_MUTATION);\n\n  const [stopSchedule] = useMutation<StopScheduleMutation, StopScheduleMutationVariables>(\n    STOP_SCHEDULE_MUTATION,\n  );\n\n  const start = async (schedule: ScheduleInfo) => {\n    const {repoAddress, scheduleName} = schedule;\n    const variables = {\n      scheduleSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        scheduleName,\n      },\n    };\n\n    const {data} = await startSchedule({variables});\n\n    switch (data?.startSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.startSchedule.message,\n        });\n    }\n  };\n\n  const stop = async (schedule: ScheduleInfo) => {\n    const {scheduleName, scheduleState} = schedule;\n    const variables = {\n      scheduleOriginId: scheduleState.id,\n      scheduleSelectorId: scheduleState.selectorId,\n    };\n\n    const {data} = await stopSchedule({variables});\n\n    switch (data?.stopRunningSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.stopRunningSchedule.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const schedule of schedules) {\n      if (openWithIntent === 'start') {\n        await start(schedule);\n      } else {\n        await stop(schedule);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'schedule' : 'schedules'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'schedule' : 'schedules'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Schedules are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stopping ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>\n          Please do not close the window or navigate away while schedules are being updated.\n        </div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={colorAccentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={colorAccentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`\n                  : `Could not stop ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`}\n              </div>\n            </Group>\n            <ul>\n              {Object.keys(errors).map((scheduleName) => (\n                <li key={scheduleName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{scheduleName}:</strong>\n                    {errors[scheduleName] ? <div>{errors[scheduleName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start schedules' : 'Stop schedules'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\nimport {ScheduleInfo, ScheduleStateChangeDialog} from './ScheduleStateChangeDialog';\n\ninterface Props {\n  schedules: ScheduleInfo[];\n  onDone: () => void;\n}\n\nexport const ScheduleBulkActionMenu = (props: Props) => {\n  const {schedules, onDone} = props;\n  const count = schedules.length;\n\n  const [openWithIntent, setOpenWithIntent] = React.useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = React.useMemo(() => {\n    return instigationStateSummary(schedules.map(({scheduleState}) => scheduleState));\n  }, [schedules]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <ScheduleStateChangeDialog\n        openWithIntent={openWithIntent}\n        schedules={schedules}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo = ({daemonHealth, ...boxProps}: Props) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths.length > 0) {\n      const schedulerHealth = schedulerHealths[0]!;\n      healthy = schedulerHealth.required && schedulerHealth.healthy;\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const makeScheduleKey = (repoAddress: RepoAddress, scheduleName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${scheduleName}`;\n};\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  colorAccentGreen,\n  colorAccentYellow,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nimport {START_SENSOR_MUTATION, STOP_SENSOR_MUTATION} from './SensorMutations';\nimport {\n  StartSensorMutation,\n  StartSensorMutationVariables,\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from './types/SensorMutations.types';\n\nexport type SensorInfo = {\n  repoAddress: RepoAddress;\n  sensorName: string;\n  sensorState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  sensors: SensorInfo[];\n}\n\nexport const SensorStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, sensors} = props;\n  const count = sensors.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  React.useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSensor] = useMutation<StartSensorMutation, StartSensorMutationVariables>(\n    START_SENSOR_MUTATION,\n  );\n\n  const [stopSensor] = useMutation<StopRunningSensorMutation, StopRunningSensorMutationVariables>(\n    STOP_SENSOR_MUTATION,\n  );\n\n  const start = async (sensor: SensorInfo) => {\n    const {repoAddress, sensorName} = sensor;\n    const variables = {\n      sensorSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        sensorName,\n      },\n    };\n\n    const {data} = await startSensor({variables});\n\n    switch (data?.startSensor.__typename) {\n      case 'Sensor':\n        dispatch({type: 'update-success'});\n        return;\n      case 'SensorNotFoundError':\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.startSensor.message,\n        });\n    }\n  };\n\n  const stop = async (sensor: SensorInfo) => {\n    const {sensorName, sensorState} = sensor;\n    const variables = {\n      jobOriginId: sensorState.id,\n      jobSelectorId: sensorState.selectorId,\n    };\n\n    const {data} = await stopSensor({variables});\n\n    switch (data?.stopSensor.__typename) {\n      case 'StopSensorMutationResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.stopSensor.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const sensor of sensors) {\n      if (openWithIntent === 'start') {\n        await start(sensor);\n      } else {\n        await stop(sensor);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'sensor' : 'sensors'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'sensor' : 'sensors'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Sensors are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stopping ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>Please do not close the window or navigate away while sensors are being updated.</div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={colorAccentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={colorAccentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`\n                  : `Could not stop ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`}\n              </div>\n            </Group>\n            <ul style={{margin: '8px 0'}}>\n              {Object.keys(errors).map((sensorName) => (\n                <li key={sensorName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{sensorName}:</strong>\n                    {errors[sensorName] ? <div>{errors[sensorName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start sensors' : 'Stop sensors'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\nimport {SensorInfo, SensorStateChangeDialog} from './SensorStateChangeDialog';\n\ninterface Props {\n  sensors: SensorInfo[];\n  onDone: () => void;\n}\n\nexport const SensorBulkActionMenu = (props: Props) => {\n  const {sensors, onDone} = props;\n  const count = sensors.length;\n\n  const [openWithIntent, setOpenWithIntent] = React.useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = React.useMemo(() => {\n    return instigationStateSummary(sensors.map(({sensorState}) => sensorState));\n  }, [sensors]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <SensorStateChangeDialog\n        openWithIntent={openWithIntent}\n        sensors={sensors}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {gql, useMutation} from '@apollo/client';\nimport {\n  ButtonLink,\n  Button,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  TextArea,\n  colorAccentReversed,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport 'chartjs-adapter-date-fns';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {SensorSelector} from '../graphql/types';\n\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from './types/EditCursorDialog.types';\n\nexport const EditCursorDialog = ({\n  isOpen,\n  sensorSelector,\n  cursor,\n  onClose,\n}: {\n  isOpen: boolean;\n  cursor: string;\n  sensorSelector: SensorSelector;\n  onClose: () => void;\n}) => {\n  const [cursorValue, setCursorValue] = React.useState(cursor);\n  const [isSaving, setIsSaving] = React.useState(false);\n  const [requestSet] = useMutation<SetSensorCursorMutation, SetSensorCursorMutationVariables>(\n    SET_CURSOR_MUTATION,\n  );\n\n  const onSave = async () => {\n    setIsSaving(true);\n    const {data} = await requestSet({\n      variables: {sensorSelector, cursor: cursorValue},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={colorAccentReversed()}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n    onClose();\n  };\n\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={() => {\n        onClose();\n        setCursorValue(cursor);\n      }}\n      style={{\n        width: '500px',\n      }}\n      title={`Edit ${sensorSelector.sensorName} cursor`}\n    >\n      <DialogBody>\n        <TextArea\n          value={cursorValue}\n          $resize=\"vertical\"\n          onChange={(e) => setCursorValue(e.target.value)}\n          style={{width: '100%'}}\n        />\n      </DialogBody>\n      <DialogFooter>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button intent=\"primary\" onClick={onSave} disabled={isSaving}>\n          Set cursor value\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const SET_CURSOR_MUTATION = gql`\n  mutation SetSensorCursorMutation($sensorSelector: SensorSelector!, $cursor: String) {\n    setSensorCursor(sensorSelector: $sensorSelector, cursor: $cursor) {\n      ... on Sensor {\n        id\n        sensorState {\n          id\n          status\n          typeSpecificData {\n            ... on SensorData {\n              lastCursor\n            }\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Icon, Subheading, Table, Tag, colorKeylineDefault} from '@dagster-io/ui-components';\nimport React from 'react';\n\nimport {DynamicPartitionsRequestType} from '../graphql/types';\n\nimport {DynamicPartitionRequestFragment} from './types/SensorDryRunDialog.types';\n\nexport function DynamicPartitionRequests({\n  includeTitle = true,\n  requests,\n}: {\n  includeTitle?: boolean;\n  requests: Pick<DynamicPartitionRequestFragment, 'partitionKeys' | 'partitionsDefName' | 'type'>[];\n}) {\n  const rows = React.useMemo(() => {\n    if (!requests.length) {\n      return [];\n    }\n    const rows: {key: string; def: string; type: DynamicPartitionsRequestType}[] = [];\n    requests.forEach(({partitionKeys, partitionsDefName, type}) => {\n      partitionKeys?.forEach((key) => {\n        rows.push({\n          key,\n          def: partitionsDefName,\n          type,\n        });\n      });\n    });\n    return rows;\n  }, [requests]);\n\n  if (!rows.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'column', gap: 12, grow: 1}}>\n      {includeTitle ? (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          <Icon name=\"partition\" />\n          <Subheading>Dynamic Partition Requests</Subheading>\n        </Box>\n      ) : null}\n      <Table style={{borderRight: `1px solid ${colorKeylineDefault()}`}}>\n        <thead>\n          <tr>\n            <th>Partition</th>\n            <th>Partition definition</th>\n            <th>Requested change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({key, def, type}, index) => {\n            return (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{def}</td>\n                <td>\n                  {type === DynamicPartitionsRequestType.ADD_PARTITIONS ? (\n                    <Tag intent=\"success\">\n                      <span>Add Partition</span>\n                    </Tag>\n                  ) : (\n                    <Tag intent=\"danger\">\n                      <span>Delete Partition</span>\n                    </Tag>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Box>\n  );\n}\n","import {gql, useMutation} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Subheading,\n  Tag,\n  TextInput,\n  colorAccentGreen,\n  colorAccentReversed,\n  colorKeylineDefault,\n} from '@dagster-io/ui-components';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {SET_CURSOR_MUTATION} from '../sensors/EditCursorDialog';\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from '../sensors/types/EditCursorDialog.types';\nimport {testId} from '../testing/testId';\nimport {RepoAddress} from '../workspace/types';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {DynamicPartitionRequests} from './DynamicPartitionRequests';\nimport {RUN_REQUEST_FRAGMENT} from './RunRequestFragment';\nimport {\n  SensorDryRunMutation,\n  SensorDryRunMutationVariables,\n} from './types/SensorDryRunDialog.types';\n\ntype DryRunInstigationTick = Extract<\n  SensorDryRunMutation['sensorDryRun'],\n  {__typename: 'DryRunInstigationTick'}\n>;\n\ntype Props = {\n  name: string;\n  onClose: () => void;\n  repoAddress: RepoAddress;\n  currentCursor: string;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const SensorDryRunDialog = (props: Props) => {\n  const {isOpen, onClose, name} = props;\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      icon=\"sensors\"\n      title={name}\n    >\n      <SensorDryRun {...props} />\n    </Dialog>\n  );\n};\n\nconst SensorDryRun = ({repoAddress, name, currentCursor, onClose, jobName}: Props) => {\n  const [sensorDryRun] = useMutation<SensorDryRunMutation, SensorDryRunMutationVariables>(\n    EVALUATE_SENSOR_MUTATION,\n  );\n\n  const [cursor, setCursor] = React.useState(currentCursor);\n\n  const [submitting, setSubmitting] = React.useState(false);\n  const [error, setError] = React.useState<PythonErrorFragment | null>(null);\n  const [sensorExecutionData, setSensorExecutionData] =\n    React.useState<DryRunInstigationTick | null>(null);\n\n  const sensorSelector = React.useMemo(\n    () => ({\n      sensorName: name,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [repoAddress, name],\n  );\n\n  const submitTest = React.useCallback(async () => {\n    setSubmitting(true);\n    const result = await sensorDryRun({\n      variables: {\n        selectorData: sensorSelector,\n        cursor,\n      },\n    });\n    const data = result.data?.sensorDryRun;\n    if (data) {\n      if (data?.__typename === 'DryRunInstigationTick') {\n        if (data.evaluationResult?.error) {\n          setError(data.evaluationResult.error);\n        } else {\n          setSensorExecutionData(data);\n        }\n      } else if (data?.__typename === 'SensorNotFoundError') {\n        showCustomAlert({\n          title: 'Sensor not found',\n          body: `Could not find a sensor named: ${name}`,\n        });\n      } else {\n        setError(data);\n      }\n    } else {\n      assertUnreachable('sensorDryRun Mutation returned no data??' as never);\n    }\n    setSubmitting(false);\n  }, [sensorDryRun, sensorSelector, cursor, name]);\n\n  const buttons = React.useMemo(() => {\n    if (sensorExecutionData || error) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button\n            data-testid={testId('test-again')}\n            onClick={() => {\n              setSensorExecutionData(null);\n              setError(null);\n            }}\n          >\n            Test again\n          </Button>\n          <Button intent=\"primary\" onClick={onClose}>\n            Close\n          </Button>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={submitTest} intent=\"primary\" data-testid={testId('evaluate')}>\n            Evaluate\n          </Button>\n        </Box>\n      );\n    }\n  }, [sensorExecutionData, error, submitting, onClose, submitTest]);\n\n  const [cursorState, setCursorState] = React.useState<'Unpersisted' | 'Persisting' | 'Persisted'>(\n    'Unpersisted',\n  );\n  const [setCursorMutation] = useMutation<\n    SetSensorCursorMutation,\n    SetSensorCursorMutationVariables\n  >(SET_CURSOR_MUTATION);\n\n  const onPersistCursorValue = React.useCallback(async () => {\n    const cursor = sensorExecutionData?.evaluationResult?.cursor;\n    if (!cursor) {\n      assertUnreachable('Did not expect to get here' as never);\n    }\n    setCursorState('Persisting');\n    const {data} = await setCursorMutation({\n      variables: {sensorSelector, cursor},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n      setCursorState('Persisted');\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={colorAccentReversed()}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n  }, [sensorExecutionData?.evaluationResult?.cursor, sensorSelector, setCursorMutation]);\n\n  const content = React.useMemo(() => {\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n      const dynamicPartitionRequests =\n        sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Box>\n            <Grid>\n              <div>\n                <Subheading>Result</Subheading>\n                <Box flex={{grow: 1, alignItems: 'center'}}>\n                  <div>\n                    {error ? (\n                      <Tag intent=\"danger\">Failed</Tag>\n                    ) : numRunRequests ? (\n                      <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                    ) : (\n                      <Tag intent=\"warning\">Skipped</Tag>\n                    )}\n                  </div>\n                </Box>\n              </div>\n              <div>\n                <Subheading>Used cursor value</Subheading>\n                <pre>{cursor?.length ? cursor : 'None'}</pre>\n              </div>\n              <div>\n                <Subheading>Computed cursor value</Subheading>\n                <pre>\n                  {sensorExecutionData?.evaluationResult?.cursor?.length\n                    ? sensorExecutionData?.evaluationResult.cursor\n                    : error\n                    ? 'Error'\n                    : 'None'}\n                </pre>\n                {error ||\n                (currentCursor ?? '') ===\n                  (sensorExecutionData?.evaluationResult?.cursor ?? '') ? null : (\n                  <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                    <Button\n                      disabled={['Persisting', 'Persisted'].includes(cursorState)}\n                      loading={cursorState === 'Persisting'}\n                      onClick={onPersistCursorValue}\n                    >\n                      <span data-testid={testId('persist-cursor')}>\n                        {cursorState === 'Persisting'\n                          ? 'Persisting'\n                          : cursorState === 'Persisted'\n                          ? 'Persisted'\n                          : 'Persist computed cursor value'}\n                      </span>\n                    </Button>\n                    {cursorState === 'Persisted' ? (\n                      <Icon name=\"check_circle\" color={colorAccentGreen()} />\n                    ) : null}\n                  </Box>\n                )}\n              </div>\n            </Grid>\n            {error ? (\n              <div>\n                <PythonErrorInfo error={error} />\n              </div>\n            ) : null}\n            {didSkip ? (\n              <div>\n                <Subheading>Skip reason</Subheading>\n                <div>\n                  {sensorExecutionData?.evaluationResult?.skipReason || 'No skip reason was output'}\n                </div>\n              </div>\n            ) : null}\n            {numRunRequests && runRequests ? (\n              <RunRequestTable\n                runRequests={runRequests}\n                name={name}\n                jobName={jobName}\n                isJob={true}\n                repoAddress={repoAddress}\n              />\n            ) : null}\n            {dynamicPartitionRequests?.length ? (\n              <div style={{marginTop: '24px'}}>\n                <DynamicPartitionRequests requests={dynamicPartitionRequests} />\n              </div>\n            ) : null}\n          </Box>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Evaluating sensor</div>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>Cursor</div>\n          <TextInput\n            value={cursor}\n            onChange={(e) => setCursor(e.target.value)}\n            data-testid={testId('cursor-input')}\n          />\n          {currentCursor === '' || !currentCursor ? (\n            <Box padding={{top: 16, bottom: 32}} flex={{justifyContent: 'center'}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"You're not using a cursor\"\n                description={\n                  <span>\n                    Check our{' '}\n                    <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#idempotence-and-cursors\">\n                      sensor documentation\n                    </a>{' '}\n                    to learn how to use cursors\n                  </span>\n                }\n              />\n            </Box>\n          ) : null}\n        </Box>\n      );\n    }\n  }, [\n    sensorExecutionData,\n    error,\n    submitting,\n    currentCursor,\n    cursorState,\n    onPersistCursorValue,\n    name,\n    jobName,\n    repoAddress,\n    cursor,\n  ]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      <DialogFooter topBorder>{buttons}</DialogFooter>\n    </>\n  );\n};\n\nexport const EVALUATE_SENSOR_MUTATION = gql`\n  mutation SensorDryRunMutation($selectorData: SensorSelector!, $cursor: String) {\n    sensorDryRun(selectorData: $selectorData, cursor: $cursor) {\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          cursor\n          runRequests {\n            ...RunRequestFragment\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n          dynamicPartitionsRequests {\n            ...DynamicPartitionRequestFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment DynamicPartitionRequestFragment on DynamicPartitionRequest {\n    partitionKeys\n    partitionsDefName\n    type\n  }\n\n  ${RUN_REQUEST_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${colorKeylineDefault()};\n  margin-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n","import {Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {AssetLink} from '../assets/AssetLink';\nimport {SensorMetadata} from '../graphql/types';\n\nexport const SensorMonitoredAssets = ({metadata}: {metadata: SensorMetadata | undefined}) => {\n  if (!metadata?.assetKeys?.length) {\n    return <span />;\n  }\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {metadata.assetKeys.map((key) => (\n        <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n      ))}\n    </Box>\n  );\n};\n","import {\n  Box,\n  Button,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Heading,\n  FontFamily,\n  Icon,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {SensorDryRunDialog} from '../ticks/SensorDryRunDialog';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RepoAddress} from '../workspace/types';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorMonitoredAssets} from './SensorMonitoredAssets';\nimport {SensorSwitch} from './SensorSwitch';\nimport {SensorTargetList} from './SensorTargetList';\nimport {SensorFragment} from './types/SensorFragment.types';\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  minIntervalSeconds = Math.max(30, minIntervalSeconds);\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails = ({\n  sensor,\n  repoAddress,\n  daemonHealth,\n  refreshState,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    metadata,\n  } = sensor;\n\n  const [isCursorEditing, setCursorEditing] = React.useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  const [showTestTickDialog, setShowTestTickDialog] = React.useState(false);\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <Heading>{name}</Heading>\n            <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n          </Box>\n        }\n        icon=\"sensors\"\n        tags={\n          <>\n            <Tag icon=\"sensors\">\n              Sensor in <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {sensor.nextTick && daemonHealth && running ? (\n              <Tag icon=\"timer\">\n                Next tick: <TimestampDisplay timestamp={sensor.nextTick.timestamp!} />\n              </Tag>\n            ) : null}\n          </>\n        }\n        right={\n          <Box margin={{top: 4}} flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            {sensor.sensorType === SensorType.STANDARD ? (\n              <Button\n                onClick={() => {\n                  setShowTestTickDialog(true);\n                }}\n              >\n                Test Sensor\n              </Button>\n            ) : null}\n          </Box>\n        }\n      />\n      <SensorDryRunDialog\n        isOpen={showTestTickDialog}\n        onClose={() => {\n          setShowTestTickDialog(false);\n        }}\n        currentCursor={cursor || ''}\n        name={sensor.name}\n        repoAddress={repoAddress}\n        jobName={sensor.targets?.[0]?.pipelineName || ''}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} />\n                    <TickStatusTag tick={latestTick} />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.targets && sensor.targets.length ? (\n            <tr>\n              <td>Target</td>\n              <td>\n                <SensorTargetList targets={sensor.targets} repoAddress={repoAddress} />\n              </td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored assets</td>\n              <td>\n                <SensorMonitoredAssets metadata={metadata} />\n              </td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>\n              <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                Cursor\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                <span style={{fontFamily: FontFamily.monospace, fontSize: '16px'}}>\n                  {cursor ? cursor : 'None'}\n                </span>\n                <Button icon={<Icon name=\"edit\" />} onClick={() => setCursorEditing(true)}>\n                  Edit\n                </Button>\n              </Box>\n              <EditCursorDialog\n                isOpen={isCursorEditing}\n                sensorSelector={sensorSelector}\n                cursor={cursor ? cursor : ''}\n                onClose={() => setCursorEditing(false)}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SensorInfo = ({daemonHealth, ...boxProps}: Props) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const sensorHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SENSOR',\n    );\n    if (sensorHealths[0]) {\n      const sensorHealth = sensorHealths[0];\n      healthy = !!(sensorHealth.required && sensorHealth.healthy);\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The sensor daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a\n                href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorTargetList = ({\n  targets,\n  repoAddress,\n}: {\n  targets: {pipelineName: string}[] | null | undefined;\n  repoAddress: RepoAddress;\n}) => {\n  const repo = useRepository(repoAddress);\n  if (!targets) {\n    return <span />;\n  }\n\n  const visibleTargets = targets.filter((target) => !isHiddenAssetGroupJob(target.pipelineName));\n\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {visibleTargets.length < targets.length && <span>A selection of assets</span>}\n      {visibleTargets.map((target) =>\n        target.pipelineName ? (\n          <PipelineReference\n            key={target.pipelineName}\n            pipelineName={target.pipelineName}\n            pipelineHrefContext={repoAddress}\n            isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n          />\n        ) : null,\n      )}\n    </Box>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const makeSensorKey = (repoAddress: RepoAddress, sensorName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${sensorName}`;\n};\n","import {Box, Icon, Table, Tag, colorKeylineDefault} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport React from 'react';\n\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {testId} from '../testing/testId';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {RunRequestFragment} from './types/RunRequestFragment.types';\n\ntype Props = {\n  name: string;\n  runRequests: RunRequestFragment[];\n  repoAddress: RepoAddress;\n  isJob: boolean;\n  jobName: string;\n  mode?: string;\n};\n\nexport const RunRequestTable = ({runRequests, isJob, repoAddress, mode, jobName}: Props) => {\n  const repo = useRepository(repoAddress);\n\n  const body = (\n    <tbody data-testid={testId('table-body')}>\n      {runRequests.map((request, index) => {\n        return (\n          <tr key={index} data-testid={testId(request.runKey || '')}>\n            <td>\n              <Box flex={{alignItems: 'center', gap: 8}}>\n                <PipelineReference\n                  pipelineName={request.jobName ?? jobName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isJob}\n                  showIcon\n                  size=\"small\"\n                />\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'row', gap: 8, wrap: 'wrap'}}>\n                {filterTags(request.tags).map(({key, value}) => (\n                  <Tag key={key}>{`${key}: ${value}`}</Tag>\n                ))}\n              </Box>\n            </td>\n            <td>\n              <AnchorButton\n                icon={<Icon name=\"edit\" />}\n                target=\"_blank\"\n                to={workspacePathFromAddress(\n                  repoAddress,\n                  `/pipeline_or_job/${request.jobName ?? jobName}/playground/setup?${qs.stringify({\n                    mode,\n                    config: request.runConfigYaml,\n                    tags: request.tags,\n                    assetSelection: request.assetSelection?.map(({path}) => ({\n                      assetKey: {path},\n                    })),\n                  })}`,\n                )}\n              >\n                Open in Launchpad\n              </AnchorButton>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n  return (\n    <div>\n      <Table style={{borderRight: `1px solid ${colorKeylineDefault()}`, tableLayout: 'fixed'}}>\n        <thead>\n          <tr>\n            <th>{isJob ? 'Job' : 'Pipeline'} name</th>\n            <th>Tags</th>\n            <th>Configuration</th>\n          </tr>\n        </thead>\n        {body}\n      </Table>\n    </div>\n  );\n};\n\n// Filter out tags we already display in other ways\nfunction filterTags(tags: Array<{key: string; value: any}>) {\n  return tags.filter(({key}) => {\n    // Exclude the tag that specifies the schedule if this is a schedule name\n    return !['dagster/schedule_name'].includes(key);\n  });\n}\n","import {gql} from '@apollo/client';\n\nexport const RUN_REQUEST_FRAGMENT = gql`\n  fragment RunRequestFragment on RunRequest {\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n    runKey\n    jobName\n    assetSelection {\n      path\n    }\n  }\n`;\n","import {\n  Tag,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Button,\n  BaseTag,\n  Box,\n  ButtonLink,\n  Tooltip,\n  colorBackgroundLighter,\n} from '@dagster-io/ui-components';\nimport React from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\n\nexport const TickStatusTag = ({\n  tick,\n  isStuckStarted,\n}: {\n  tick:\n    | Pick<AssetDaemonTickFragment, 'status' | 'error' | 'requestedAssetMaterializationCount'>\n    | Pick<HistoryTickFragment, 'status' | 'skipReason' | 'runIds' | 'runKeys' | 'error'>;\n  isStuckStarted?: boolean;\n}) => {\n  const [showErrors, setShowErrors] = React.useState(false);\n  const tag = React.useMemo(() => {\n    const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n    switch (tick.status) {\n      case InstigationTickStatus.STARTED:\n        return (\n          <Tag intent=\"primary\" icon=\"spinner\">\n            {isStuckStarted ? 'Started' : 'Evaluating'}\n          </Tag>\n        );\n      case InstigationTickStatus.SKIPPED:\n        const tag = <BaseTag fillColor={colorBackgroundLighter()} label=\"0 requested\" />;\n        if ('runKeys' in tick && tick.runKeys.length) {\n          const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {tag}\n            </Tooltip>\n          );\n        }\n        if ('skipReason' in tick && tick.skipReason) {\n          return (\n            <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n              {tag}\n            </Tooltip>\n          );\n        }\n        return tag;\n      case InstigationTickStatus.FAILURE:\n        return (\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n            <Tag intent=\"danger\">Failure</Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  setShowErrors(true);\n                }}\n              >\n                View\n              </ButtonLink>\n            ) : null}\n          </Box>\n        );\n      case InstigationTickStatus.SUCCESS:\n        const count = isAssetDaemonTick\n          ? tick.requestedAssetMaterializationCount\n          : tick.runIds.length;\n        const successTag = <Tag intent=\"success\">{count} requested</Tag>;\n        if ('runKeys' in tick && tick.runKeys.length > tick.runIds.length) {\n          const message = `${tick.runKeys.length} runs requested, but ${\n            tick.runKeys.length - tick.runIds.length\n          } skipped because the runs already exist for those requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {successTag}\n            </Tooltip>\n          );\n        }\n        return successTag;\n    }\n  }, [isStuckStarted, tick]);\n\n  return (\n    <>\n      {tag}\n      {tick.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n","import {Checkbox, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  checkedCount: number;\n  totalCount: number;\n  onToggleAll: (checked: boolean) => void;\n}\n\nexport const CheckAllBox = ({checkedCount, totalCount, onToggleAll}: Props) => {\n  return (\n    <Tooltip content={`${checkedCount} of ${totalCount} selected`} placement=\"top\">\n      <Checkbox\n        indeterminate={checkedCount > 0 && checkedCount !== totalCount}\n        checked={checkedCount > 0 && checkedCount === totalCount}\n        onChange={(e) => {\n          if (e.target instanceof HTMLInputElement) {\n            onToggleAll(checkedCount !== totalCount);\n          }\n        }}\n      />\n    </Tooltip>\n  );\n};\n","import * as React from 'react';\n\nimport {InstigationStatus} from '../../graphql/types';\n\nimport {useStaticSetFilter} from './useStaticSetFilter';\n\nexport const useInstigationStatusFilter = () => {\n  return useStaticSetFilter<InstigationStatus>({\n    name: 'Running state',\n    icon: 'toggle_off',\n    allValues: [\n      {value: InstigationStatus.RUNNING, match: ['on', 'running']},\n      {value: InstigationStatus.STOPPED, match: ['off', 'stopped']},\n    ],\n    getKey: (value) => value,\n    renderLabel: ({value}) => (\n      <span>{value === InstigationStatus.RUNNING ? 'Running' : 'Stopped'}</span>\n    ),\n    getStringValue: (value) => value,\n  });\n};\n","import {colorBackgroundDefault, colorKeylineDefault} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\ninterface Props {\n  $top?: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top = 0}) => $top}px;\n    background-color: ${colorBackgroundDefault()};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${colorKeylineDefault()};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import * as React from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagster.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = React.useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = React.useCallback(\n    (repoAddress: RepoAddress) => {\n      const key = repoAddressAsHumanString(repoAddress);\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = React.useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = React.useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return React.useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const onReexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, {data}] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const fetchIfPossible = React.useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.ALL_STEPS) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.FROM_FAILURE) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        executionPlan {\n          artifactsPersisted\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, MiddleTruncate, colorTextLight} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const pipeline =\n    data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n  const {schedules, sensors} = React.useMemo(() => {\n    if (pipeline) {\n      const {schedules, sensors} = pipeline;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [pipeline]);\n\n  const latestRuns = React.useMemo(() => {\n    if (pipeline) {\n      const {runs} = pipeline;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [pipeline]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>{pipeline?.description || ''}</CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns[0] ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu\n              job={{name, isJob, runs: latestRuns}}\n              isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n              repoAddress={repoAddress}\n            />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: colorTextLight(),\n      }}\n    >\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp4-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {InstigationStatus} from '../graphql/types';\n\nexport const errorDisplay = (status: InstigationStatus, runningScheduleCount: number) => {\n  if (status === InstigationStatus.STOPPED && runningScheduleCount === 0) {\n    return null;\n  } else if (status === InstigationStatus.RUNNING && runningScheduleCount === 1) {\n    return null;\n  }\n\n  const errors = [];\n  if (status === InstigationStatus.RUNNING && runningScheduleCount === 0) {\n    errors.push(\n      'Schedule is set to be running, but either the scheduler is not configured or the scheduler is not running the schedule',\n    );\n  } else if (status === InstigationStatus.STOPPED && runningScheduleCount > 0) {\n    errors.push('Schedule is set to be stopped, but the scheduler is still running the schedule');\n  }\n\n  if (runningScheduleCount > 0) {\n    errors.push('Duplicate cron job for schedule found.');\n  }\n\n  return (\n    <Popover\n      interactionKind=\"hover\"\n      popoverClassName=\"bp4-popover-content-sizing\"\n      position=\"right\"\n      content={\n        <Box flex={{direction: 'column', gap: 8}} padding={12}>\n          <strong>There are errors with this schedule.</strong>\n          <div>Errors:</div>\n          <ul>\n            {errors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </Box>\n      }\n    >\n      <Tag fill interactive intent=\"danger\">\n        Error\n      </Tag>\n    </Popover>\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Caption,\n  Checkbox,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n  colorTextDefault,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {ScheduleSwitch, SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {MenuLink} from '../ui/MenuLink';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from './types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = '60px 1fr 1fr 76px 148px 210px 92px';\nconst TEMPLATE_COLUMNS = '1fr 1fr 76px 148px 210px 92px';\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  scheduleState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    scheduleState,\n    start,\n    height,\n  } = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySchedule, queryResult] = useLazyQuery<\n    SingleScheduleQuery,\n    SingleScheduleQueryVariables\n  >(SINGLE_SCHEDULE_QUERY, {\n    variables: {\n      selector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useDelayedRowQuery(querySchedule);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  const cronString = scheduleData\n    ? humanCronString(scheduleData.cronSchedule, scheduleData.executionTimezone || 'UTC')\n    : '';\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = scheduleState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this schedule'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this schedule'};\n    }\n    return {disabled: false};\n  }, [scheduleState]);\n\n  const tick = scheduleData?.scheduleState.ticks[0];\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            {scheduleData ? (\n              <Caption>\n                <PipelineReference\n                  showIcon\n                  size=\"small\"\n                  pipelineName={scheduleData.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={isJob}\n                />\n              </Caption>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <ScheduleStringContainer style={{maxWidth: '100%'}}>\n                <Tooltip position=\"top-left\" content={scheduleData.cronSchedule} display=\"block\">\n                  <div\n                    style={{\n                      color: colorTextDefault(),\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                    title={cronString}\n                  >\n                    {cronString}\n                  </div>\n                </Tooltip>\n              </ScheduleStringContainer>\n              {scheduleData.scheduleState.nextTick &&\n              scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                <Caption>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    Next tick:&nbsp;\n                    <TimestampDisplay\n                      timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                      timezone={scheduleData.executionTimezone}\n                      timeFormat={{showSeconds: false, showTimezone: true}}\n                    />\n                  </div>\n                </Caption>\n              ) : null}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : (\n            <span style={{color: colorTextLight()}}>{'\\u2013'}</span>\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedScheduleHeader = (props: {checkbox: React.ReactNode}) => {\n  const {checkbox} = props;\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: colorTextLight(),\n      }}\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Schedule name</HeaderCell>\n      <HeaderCell>Schedule</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleStringContainer = styled.div`\n  max-width: 100%;\n\n  .bp4-popover2-target {\n    max-width: 100%;\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n\nconst SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Caption,\n  Checkbox,\n  MiddleTruncate,\n  Tooltip,\n  colorTextDefault,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SensorSwitch, SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {SensorTargetList} from '../sensors/SensorTargetList';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = '60px 1.5fr 1fr 76px 120px 148px 180px';\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 76px 120px 148px 180px';\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  sensorState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    sensorState,\n    start,\n    height,\n  } = props;\n\n  const [querySensor, queryResult] = useLazyQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n    SINGLE_SENSOR_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n    },\n  );\n\n  useDelayedRowQuery(querySensor);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = sensorState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this sensor'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this sensor'};\n    }\n    return {disabled: false};\n  }, [sensorState]);\n\n  const tick = sensorData?.sensorState.ticks[0];\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: colorTextLight(),\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {sensorData?.description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n            <SensorTargetList targets={sensorData?.targets} repoAddress={repoAddress} />\n          </Box>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div style={{color: colorTextDefault()}}>\n              {humanizeSensorInterval(sensorData.minIntervalSeconds)}\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedSensorHeader = (props: {checkbox: React.ReactNode}) => {\n  const {checkbox} = props;\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: colorTextLight(),\n      }}\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Frequency</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        description\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {LazyQueryExecFunction, QueryResult} from '@apollo/client';\nimport {Caption, colorTextLight} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {RepoSectionHeader} from '../runs/RepoSectionHeader';\nimport {Row} from '../ui/VirtualizedTable';\n\nimport {RepoAddress} from './types';\n\nexport const RepoRow = ({\n  repoAddress,\n  height,\n  start,\n  expanded,\n  onToggle,\n  onToggleAll,\n  showLocation,\n  rightElement,\n}: {\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n  showLocation: boolean;\n  rightElement: React.ReactNode;\n  expanded: boolean;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}) => {\n  return (\n    <Row $height={height} $start={start}>\n      <RepoSectionHeader\n        repoName={repoAddress.name}\n        repoLocation={repoAddress.location}\n        expanded={expanded}\n        onClick={(e: React.MouseEvent) =>\n          e.getModifierState('Shift') ? onToggleAll(!expanded) : onToggle(repoAddress)\n        }\n        showLocation={showLocation}\n        rightElement={rightElement}\n      />\n    </Row>\n  );\n};\n\nexport const LoadingOrNone = ({\n  queryResult,\n  noneString = 'None',\n}: {\n  queryResult: QueryResult<any, any>;\n  noneString?: React.ReactNode;\n}) => {\n  const {called, loading, data} = queryResult;\n  return (\n    <div style={{color: colorTextLight()}}>\n      {!called || (loading && !data) ? 'Loading' : noneString}\n    </div>\n  );\n};\n\nexport const CaptionText = ({children}: {children: React.ReactNode}) => {\n  return (\n    <CaptionTextContainer>\n      <Caption>{children}</Caption>\n    </CaptionTextContainer>\n  );\n};\n\nconst CaptionTextContainer = styled.div`\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${Caption} {\n    color: ${colorTextLight()};\n    white-space: nowrap;\n  }\n`;\n\nconst JOB_QUERY_DELAY = 100;\n\nexport const useDelayedRowQuery = (lazyQueryFn: LazyQueryExecFunction<any, any>) => {\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      lazyQueryFn();\n    }, JOB_QUERY_DELAY);\n\n    return () => clearTimeout(timer);\n  }, [lazyQueryFn]);\n};\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props<TData> {\n  repoAddress: RepoAddress;\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const WorkspaceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {repoAddress, refreshState, tab} = props;\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"assets\" title=\"Assets\" to={workspacePathFromAddress(repoAddress, '/assets')} />\n        <TabLink id=\"jobs\" title=\"Jobs\" to={workspacePathFromAddress(repoAddress, '/jobs')} />\n        <TabLink\n          id=\"schedules\"\n          title=\"Schedules\"\n          to={workspacePathFromAddress(repoAddress, '/schedules')}\n        />\n        <TabLink\n          id=\"sensors\"\n          title=\"Sensors\"\n          to={workspacePathFromAddress(repoAddress, '/sensors')}\n        />\n        <TabLink id=\"graphs\" title=\"Graphs\" to={workspacePathFromAddress(repoAddress, '/graphs')} />\n        <TabLink id=\"ops\" title=\"Ops\" to={workspacePathFromAddress(repoAddress, '/ops')} />\n        <TabLink\n          id=\"resources\"\n          title=\"Resources\"\n          to={workspacePathFromAddress(repoAddress, '/resources')}\n        />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {\n  PageHeader,\n  Box,\n  Heading,\n  Button,\n  Icon,\n  Tooltip,\n  colorTextDefault,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {QueryRefreshState} from '../app/QueryRefresh';\nimport {\n  NO_RELOAD_PERMISSION_TEXT,\n  ReloadRepositoryLocationButton,\n} from '../nav/ReloadRepositoryLocationButton';\n\nimport {WorkspaceTabs} from './WorkspaceTabs';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\n\ninterface Props<TData> {\n  repoAddress: RepoAddress;\n  tab: string;\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n}\n\nexport const WorkspaceHeader = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {repoAddress, tab, refreshState, queryData} = props;\n\n  return (\n    <PageHeader\n      title={\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Heading>\n            <Link to=\"/locations\" style={{color: colorTextDefault()}}>\n              Deployment\n            </Link>\n          </Heading>\n          <Heading>/</Heading>\n          <Heading style={{color: colorTextLight()}}>\n            {repoAddressAsHumanString(repoAddress)}\n          </Heading>\n        </Box>\n      }\n      tabs={\n        <WorkspaceTabs\n          repoAddress={repoAddress}\n          tab={tab}\n          refreshState={refreshState}\n          queryData={queryData}\n        />\n      }\n      right={\n        <ReloadRepositoryLocationButton\n          location={repoAddress.location}\n          ChildComponent={({tryReload, reloading, hasReloadPermission}) => {\n            return (\n              <Tooltip\n                canShow={!hasReloadPermission}\n                content={hasReloadPermission ? '' : NO_RELOAD_PERMISSION_TEXT}\n                useDisabledButtonTooltipFix\n              >\n                <Button\n                  onClick={() => tryReload()}\n                  loading={reloading}\n                  disabled={!hasReloadPermission}\n                  icon={<Icon name=\"refresh\" />}\n                  outlined\n                >\n                  Reload definitions\n                </Button>\n              </Tooltip>\n            );\n          }}\n        />\n      }\n    />\n  );\n};\n"],"names":["ifPlural","count","singularString","pluralString","backfillCanShowStepStatus","backfill","partitionSet","partitionNames","BackfillStepStatusDialog","param","onClose","jsx_runtime","jsxs","Dialog","isOpen","title","concat","id","style","width","content","repoAddress","buildRepoAddress","repositoryOrigin","repositoryName","repositoryLocationName","jsx","BackfillStepStatusDialogContent","DialogFooter","topBorder","Button","onClick","BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT","gql","React","pageSize","setPageSize","offset","setOffset","runsFilter","token","value","partitions","usePartitionStepQuery","partitionSetName","name","partitionTagName","DagsterTag","Partition","repositorySelector","repoAddressToSelector","jobName","pipelineName","skipQuery","PartitionPerOpStatus","BackfillTerminationDialog","onComplete","cancelBackfill","useMutation","CANCEL_BACKFILL_MUTATION","data","useQuery","SINGLE_BACKFILL_STATUS_DETAILS_QUERY","variables","backfillId","notifyOnNetworkStatusChange","skip","isSubmitting","setIsSubmitting","unfinishedMap","partitionBackfillOrError","__typename","unfinishedPartitions","partitionStatuses","results","filter","partition","runStatus","runId","cancelableStatuses","has","reduce","accum","_object_spread_props","_","_object_spread","_define_property","numUnscheduled","numCancelable","cancel","_async_to_generator","_state","sent","Fragment","status","BulkActionStatus","CANCELED","isAssetBackfill","DialogBody","intent","disabled","TerminationDialog","Object","keys","length","selectedRuns","BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT","PYTHON_ERROR_FRAGMENT","backfillCanCancelRuns","counts","hasCancelPermission","queuedCount","RunStatus","QUEUED","startedCount","STARTED","BackfillActionsMenu","canCancelRuns","refetch","history","useHistory","runsUrl","runsPathWithFilters","showTerminateDialog","setShowTerminateDialog","showStepStatus","setShowStepStatus","resumeBackfill","RESUME_BACKFILL_MUTATION","resume","error","resumePartitionBackfill","showSharedToaster","message","Group","direction","spacing","div","icon","action","text","showCustomAlert","body","PythonErrorInfo","canCancelSubmission","REQUESTED","Popover","position","Menu","MenuItem","push","hasResumePermission","FAILED","Icon","undefined","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","BackfillRow","props","numPartitions","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","BackfillRowContent","statuses","statusQueryResult","BackfillRowLoader","statusDetails","useLazyQuery","statusCounts","SINGLE_BACKFILL_STATUS_COUNTS_QUERY","_ref","_swc_helpers_sliced_to_array__WEBPACK_IMPORTED_MODULE_27__","BACKFILL_PARTITIONS_COUNTS_THRESHOLD","statusQueryFn","useDelayedRowQuery","useQueryRefreshAtInterval","FIFTEEN_SECONDS","fromEntries","partitionStatusCounts","map","e","countBy","k","children","allPartitions","showBackfillTarget","onShowPartitionsRequested","tr","td","Mono","fontSize","lineHeight","Link","to","timestamp","TimestampDisplay","BackfillTarget","BackfillRequestedRange","onExpand","CreatedByTagCell","tags","loading","color","colorTextLight","BackfillStatusTag","isValidSerialization","BackfillRunStatus","p","partitionCounts","entries","health","runStatusForPartitionKey","key","s","partitionName","NOT_STARTED","PartitionStatus","splitPartitions","entry","find","r","RunStatusTagsWithCounts","succeededCount","SUCCESS","inProgressCount","failedCount","FAILURE","repo","useRepository","assetSelection","isHiddenAssetPartitionSet","isHiddenAssetGroupJob","Box","flex","gap","fontWeight","workspacePipelinePath","repoName","repoLocation","isJob","isThisThingAJob","path","encodeURIComponent","span","alignItems","workspacePathFromAddress","repoAddressAsHumanString","AssetKeyTagCollection","assetKeys","dialogTitle","PipelineReference","showIcon","size","pipelineHrefContext","location","numPartitionsLabel","toLocaleString","TagButton","Tag","interactive","RequestedPartitionStatusBar","all","requested","includes","small","hideStatusTooltip","BackfillStatusTagForPage","margin","bottom","COMPLETED","Array","from","inProgressStatuses","some","CANCELING","styled","button","withConfig","errorState","COLLATOR","Intl","Collator","navigator","language","sensitivity","numeric","BackfillPartitionsRequestedDialog","fontFamily","FontFamily","monospace","DialogContent","sorted","_to_consumable_array","sort","a","b","compare","height","overflow","VirtualizedItemListForDialog","items","renderItem","TruncatedTextWithFullTextOnHover","BackfillTable","_param_showBackfillTarget","backfills","partitionsRequestedBackfill","setPartitionsRequestedBackfill","Table","thead","th","tbody","BACKFILL_TABLE_FRAGMENT","_obj","_obj1","dayjs","relativeTime","COLOR_MAP","_swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_10__","InstigationTickStatus","colorAccentGreen","colorAccentRed","colorAccentLavender","SKIPPED","colorBackgroundDisabled","HoverColorMap","colorAccentGreenHover","colorAccentRedHover","colorAccentLavenderHover","colorAccentGrayHover","timestampFormat","memoize","timezone","DateTimeFormat","hour","minute","second","hourCycle","timeZone","browserTimezone","timeZoneName","LiveTickTimeline","ticks","onHoverTick","onSelectTick","exactRange","timeRange","_param_tickGrid","tickGrid","MINUTE","timeAfter","Date","now","setNow","isPaused","setPaused","interval","setInterval","clearInterval","maxX","minX","_param_timeRange","fullRange","useViewport","viewport","containerProps","ticksReversed","tick","endTimestamp","reverse","ticksToDisplay","startX","viewportWidth","endX","isOldTickWithoutEndtimestamp","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_14__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_15__","Math","max","timeTickGridDelta","tickGridDelta","startTickGridX","ceil","gridTicks","i","time","x","showLabel","TimeContext","marginRight","TicksWrapper","GridTick","transform","GridTickLine","GridTickTime","Caption","format","isAssetDaemonTick","requestedAssetMaterializationCount","runIds","Tick","onMouseEnter","onMouseLeave","Tooltip","TickTooltip","NowIndicator","TimeAxisWrapper","runs","startTime","endTime","elapsedTime","as","colorKeylineDefault","colorBackgroundDefault","colorAccentPrimary","colorAccentReversed","filterPermissionedInstigationState","instigationState","hasStartPermission","InstigationStatus","STOPPED","hasStopPermission","RUNNING","instigationStateSummary","instigationStates","anyOff","anyOn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","state","err","return","initialState","step","completion","completed","errors","reducer","prevState","type","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_1__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_2__","completion1","_swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_3__","useInstigationStateReducer","truncate","str","slice","TRUNCATION_THRESHOLD","BASIC_INSTIGATION_STATE_FRAGMENT","OVERVIEW_COLLAPSED_KEY","PartitionRunList","PARTITION_RUN_LIST_QUERY","Spinner","purpose","pipelineRunsOrError","NonIdealState","description","RunTable","RUN_TABLE_RUN_FRAGMENT","getVisibleItemCount","BOX_SIZE","timeboundsOfPartitions","partitionColumns","minUnix","maxUnix","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","steps","Symbol","iterator","unix","min","PartitionPerAssetStatus","_param","assetHealth","rangeDimension","rangeDimensionIdx","assetQueryItems","rest","rangesByAssetKey","dimensions","ranges","rangesForSingleDimension","tokenForAssetKey","assetKey","layoutBoxesWithRangeDimension","layout","buildLayout","nodes","mode","GanttChartMode","FLAT","boxes","node","stepRows","box","totalFailurePercent","finalFailurePercent","partitionKeys","partitionKey","partitionKeyIdx","idx","runsLoaded","assetPartitionStatusToSquareColor","partitionStatusAtIndex","PartitionStepStatus","showLatestRun","AssetPartitionStatus","MATERIALIZED","MISSING","pipeline","pipelineSelector","PARTITION_STEP_STATUS_PIPELINE_QUERY","solidHandles","pipelineSnapshotOrError","useMatrixData","stepQuery","hovered","setHovered","focused","setFocused","sortPartitionSteps","stepsByName","forEach","stepRow","visibleCount","visibleStart","visibleEnd","visibleColumns","topLabelHeight","topLabelHeightForLabels","PartitionRunMatrixContainer","padding","autoFocus","display","GridFloatingContainer","floating","GridColumn","flexShrink","TopLabel","LeftLabel","paddingLeft","Divider","data-tooltip","stepName","PagerControl","$direction","right","zIndex","TopLabelTilted","$height","label","textAlign","PartitionSquare","colorBackgroundDefaultHover","PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT","TOOLTIP_STYLE","JSON","stringify","top","left","opened","setOpened","squareStatus","toLowerCase","_reverse_find","className","data-tooltip-style","interactionKind","placement","onOpening","onClosed","MenuLink","linkToRunEvent","stepKey","STEP_STATUS_COLORS","SUCCESS_SKIPPED","FAILURE_SKIPPED","colorAccentYellow","IN_PROGRESS","colorAccentBlue","flatGradient","multiselectFocused","TopLabelTiltedInner","colorBackgroundLight","colorAccentBlueHover","colorAccentGray","colorBackgroundGray","colorBackgroundGrayHover","colors","join","labels","maxlength","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_5__","GRID_FLOATING_CONTAINER_WIDTH","colorBorderDefault","MISSING_STEP_STATUSES","Set","StepEventStatus","getStartTime","byStartTimeAsc","isStepKeyForNode","nodeName","dynamicRegex","match","inputs","cachedMatrixData","current","shallowCompareKeys","result","explodeCompositesInHandleGraph","h","solid","solidsFiltered","filterByQuery","buildMatrixData","options","partitionsByName","blankState","lastRun","lastRunStepStatus","stepStats","stats","previousRunStatus","currRun","currRunStatus","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_6__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_7__","partitionsWithARun","totalFailures","finalFailures","endsWith","round","showFailuresAndGapsOnly","ii","splice","every","PARTITION_MATRIX_STEP_RUN_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","InitialDataState","loadingCursorIdx","byName","client","useApolloClient","version","dataState","setDataState","_serializedRunTags","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_8__","split","RepositoryLabelTag","v","runTags","parse","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_9__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_10__","run","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_11__","stopIdx","parallelQueries","timer","_$_to_consumable_array","nextCursorIdx","fetched","Promise","sliceNames","partitionSetTag","PartitionSet","partitionTag","fetchRunsForFilter","limit","apply","recent","pending","relevant","t","updated","o","query","fetchPolicy","PARTITION_STEP_LOADER_QUERY","titles","configuration","uses","ResourceTabs","resourceName","numUses","useRouteMatch","active","params","tab","Tabs","selectedTabId","TabLink","minimal","succinctType","resourceType","pop","resourceDisplayName","resource","startsWith","SectionHeader","vertical","background","border","ResourceRoot","useTrackPageView","queryResult","useParams","useDocumentTitle","resourceSelector","RESOURCE_ROOT_QUERY","displayName","topLevelResourceDetailsOrError","parentResources","assetKeysUsing","jobsOpsUsing","schedulesUsing","sensorsUsing","Page","PageHeader","Heading","tabs","Loading","allowStaleData","Alert","ButtonLink","colorLinkDefault","underline","resourceTypeSuccinct","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","overflowY","ResourceUses","resourceDetails","ResourceConfig","RightInfoPanel","RightInfoPanelContent","SidebarSection","horizontal","RepositoryLink","showRefresh","configuredValues","cv","nestedResources","Subheading","resourceEntry","ResourceEntry","url","strong","colSpan","configFields","field","inName","defaultValue","defaultValueAsJson","hasOwnProperty","actualValue","isDefault","configTypeKey","canShow","AssetLink","jobOps","maxWidth","job","MiddleTruncate","opsUsing","op","handleID","objects","itemName","whiteSpace","CaptionMono","RESOURCE_DETAILS_FRAGMENT","TEMPLATE_COLUMNS","VirtualizedResourceRow","start","Row","$start","RowGrid","RowCell","textOverflow","VirtualizedResourceHeader","gridTemplateColumns","HeaderCell","VirtualizedResourceTable","resources","parentRef","rowVirtualizer","useVirtualizer","getScrollElement","estimateSize","overscan","totalHeight","getTotalSize","getVirtualItems","Container","ref","Inner","$totalHeight","index","row","WorkspaceResourcesRoot","searchValue","setSearchValue","selector","queryResultOverview","WORKSPACE_RESOURCES_QUERY","refreshState","sanitizedSearch","trim","toLocaleLowerCase","anySearch","repositoryOrError","allTopLevelResourceDetails","filteredBySearch","searchToLower","WorkspaceHeader","queryData","TextInput","onChange","target","placeholder","justifyContent","paddingTop","RESOURCE_ENTRY_FRAGMENT","SECTION_HEADER_HEIGHT","RepoSectionHeader","expanded","showLocation","rightElement","isDunderRepoName","DUNDER_REPO_NAME","SectionHeaderButton","$open","RepoName","RepoLocation","colorBackgroundLightHover","IconWrapper","colorTextLighter","useFormatDateTime","storedTimezone","storedHourCycle","date","statusToColor","mergeStatusToBackground","scheduled","queued","inProgress","failed","succeeded","queuedStatuses","failedStatuses","successStatuses","statusArr","runCount","pct","Boolean","colorString","nextPct","pctSoFar","colorForStatus","toFixed","RunTimeline","_props_loading","jobs","range","end","buckets","repoKey","repoAddressAsURLString","jobsForRepo","allKeys","useRepoExpansionState","expandedKeys","onToggle","onToggleAll","flattened","flat","bucket","repoAddressFromPath","jobCount","DATE_TIME_HEIGHT","measureRef","repoOrder","localeCompare","expandedJobCount","expandedRepos","ROW_HEIGHT","duplicateRepoNames","findDuplicateRepoNames","anyJobs","TIME_HEADER_HEIGHT","TimeDividers","TimelineHeaderRow","isDuplicateRepoName","RunTimelineRow","RunsEmptyOrLoading","includesTicks","RepoRow","RunStatusTags","StatusSpan","dateTimeOptions","month","day","year","dateTimeOptionsWithTimezone","timeOnlyOptions","formatDateTime","dateMarkers","totalTime","startDateStringWithTimezone","dayBoundaries","cursor","valueOf","dayStart","getTime","dayEnd","setDate","getDate","startLeftMsec","dayLength","toString","endRight","timeMarkers","startGap","firstMarker","markerCount","replace","marker","nowLeft","toPrecision","DividerContainer","DividerLabels","DateLabel","TimeLabel","DividerLines","DividerLine","backgroundColor","NowMarker","containerWidth","batched","batchRunsForTimeline","minChunkWidth","minMultipleWidth","JobName","jobType","colorTextDefault","RunChunks","batch","RunChunk","$background","$multiple","RunHoverContent","BatchCount","AnchorButton","attrs","sliced","remaining","HoverContentJobName","maxHeight","RunStatusDot","TimeElapsed","startUnix","endUnix","overlap","config","rangeLength","batches","floor","consolidated","shift","canBatch","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_0__","minLeft","unshift","currentStart","currentEnd","nextStart","nextEnd","minStart","maxEnd","ScheduleStateChangeDialog","openWithIntent","schedules","dispatch","startSchedule","START_SCHEDULE_MUTATION","stopSchedule","STOP_SCHEDULE_MUTATION","schedule","scheduleName","scheduleSelector","stop","scheduleState","scheduleOriginId","scheduleSelectorId","selectorId","stopRunningSchedule","mutate","canQuicklyClose","canEscapeKeyClose","canOutsideClickClose","progressContent","ProgressBar","animate","NavigationBlock","completionContent","errorCount","successCount","ul","li","buttons","ScheduleBulkActionMenu","onDone","setOpenWithIntent","aria-disabled","rightIcon","SchedulerInfo","daemonHealth","boxProps","healthy","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","href","makeScheduleKey","SensorStateChangeDialog","sensors","startSensor","START_SENSOR_MUTATION","stopSensor","STOP_SENSOR_MUTATION","sensor","sensorName","sensorSelector","sensorState","jobOriginId","jobSelectorId","SensorBulkActionMenu","EditCursorDialog","cursorValue","setCursorValue","isSaving","setIsSaving","requestSet","SET_CURSOR_MUTATION","onSave","setSensorCursor","TextArea","$resize","DynamicPartitionRequests","includeTitle","requests","rows","partitionsDefName","def","grow","_param_includeTitle","borderRight","DynamicPartitionsRequestType","ADD_PARTITIONS","SensorDryRunDialog","SensorDryRun","sensorExecutionData","currentCursor","sensorDryRun","EVALUATE_SENSOR_MUTATION","setCursor","submitting","setSubmitting","setError","setSensorExecutionData","submitTest","selectorData","evaluationResult","assertUnreachable","data-testid","testId","cursorState","setCursorState","setCursorMutation","onPersistCursorValue","runRequests","numRunRequests","didSkip","dynamicPartitionRequests","dynamicPartitionsRequests","Grid","pre","skipReason","RunRequestTable","marginTop","minHeight","RUN_REQUEST_FRAGMENT","SensorMonitoredAssets","metadata","humanizeSensorInterval","minIntervalSeconds","SensorDetails","isCursorEditing","setCursorEditing","latestTick","typeSpecificData","lastCursor","showTestTickDialog","setShowTestTickDialog","running","SensorSwitch","nextTick","QueryRefreshCountdown","sensorType","SensorType","STANDARD","targets","MetadataTableWIP","TickStatusTag","SensorTargetList","SensorInfo","sensorHealths","sensorHealth","rel","visibleTargets","makeSensorKey","request","runKey","wrap","filterTags","qs","runConfigYaml","tableLayout","isStuckStarted","showErrors","setShowErrors","tag","BaseTag","fillColor","colorBackgroundLighter","runKeys","targetTagName","successTag","CheckAllBox","checkedCount","totalCount","Checkbox","indeterminate","checked","HTMLInputElement","useInstigationStatusFilter","useStaticSetFilter","allValues","getKey","renderLabel","getStringValue","StickyTableContainer","$top","_param_$top","repoNames","uniques","duplicates","add","validateExpandedKeys","parsed","isArray","collapsedKey","basePath","collapsedStorageKey","AppContext","useStateWithStorage","collapsedKeys","setCollapsedKeys","nextCollapsedKeys","delete","expand","collapsedSet","JobMenu","isAssetJob","materialize","useMaterializationAction","onReexecute","useJobReexecution","usePermissionsForLocation","_usePermissionsForLocation_permissions","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","RUN_RE_EXECUTION_QUERY","fetchHasExecutionPlan","fetchIfPossible","pipelineRunOrError","executeItem","reExecuteAllItem","ReexecutionStrategy","ALL_STEPS","canRunAllSteps","reExecuteFromFailureItem","FROM_FAILURE","canRunFromFailure","launchpadElement","onOpened","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","VirtualizedJobRow","SINGLE_JOB_QUERY","buildPipelineSelector","queryJob","pipelineOrError","latestRuns","CaptionText","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","LastRunSummary","showButton","showHover","showSummary","RunStatusPezList","fade","VirtualizedJobHeader","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","errorDisplay","runningScheduleCount","popoverClassName","fill","TEMPLATE_COLUMNS_WITH_CHECKBOX","VirtualizedScheduleRow","onToggleChecked","showCheckboxColumn","SINGLE_SCHEDULE_QUERY","querySchedule","scheduleData","scheduleOrError","cronString","humanCronString","cronSchedule","executionTimezone","checkboxState","$showCheckboxColumn","shiftKey","nativeEvent","MouseEvent","getModifierState","ScheduleStringContainer","timeFormat","showSeconds","showTimezone","ScheduleSwitch","runningCount","VirtualizedScheduleHeader","checkbox","TICK_TAG_FRAGMENT","VirtualizedSensorRow","SINGLE_SENSOR_QUERY","querySensor","sensorData","sensorOrError","VirtualizedSensorHeader","noneString","called","_param_noneString","CaptionTextContainer","lazyQueryFn","setTimeout","clearTimeout","WorkspaceTabs","ReloadRepositoryLocationButton","ChildComponent","tryReload","reloading","hasReloadPermission","NO_RELOAD_PERMISSION_TEXT","useDisabledButtonTooltipFix","outlined"],"sourceRoot":""}